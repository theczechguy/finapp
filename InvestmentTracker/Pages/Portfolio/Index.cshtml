@page
@model InvestmentTracker.Pages.Portfolio.IndexModel
@using System.Globalization
@using InvestmentTracker.Models

@{
    ViewData["Title"] = "Portfolio Overview";
}

<h2>Portfolio Overview</h2>

<div class="row mb-4">
    @foreach (var total in Model.TotalsByCurrency.OrderBy(kv => kv.Key.ToString()))
    {
        <div class="col-md-6 mb-4">
            <div class="row">
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-body text-center">
                            <h5 class="card-title">Total Value (@total.Key)</h5>
                            <p class="card-text fs-4">@total.Value.ToString("C", CultureInfo.CreateSpecificCulture(total.Key.ToCultureCode()))</p>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header">
                            Value by Category (@total.Key)
                        </div>
                        <div class="card-body">
                            <canvas id="chart-@total.Key" width="400" height="300"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<h3>Value by Category</h3>
<div class="row mb-4">
    @foreach (var categoryTotal in Model.TotalsByCategory.OrderBy(kv => kv.Key.ToString()))
    {
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    @categoryTotal.Key
                </div>
                <ul class="list-group list-group-flush">
                    @foreach (var currencyTotal in categoryTotal.Value)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            @currencyTotal.Key
                            <span class="badge bg-primary rounded-pill">@currencyTotal.Value.ToString("C", CultureInfo.CreateSpecificCulture(currencyTotal.Key.ToCultureCode()))</span>
                        </li>
                    }
                </ul>
            </div>
        </div>
    }
</div>

<h3>Latest Investment Values</h3>
<table class="table table-striped">
    <thead>
        <tr>
            <th>Investment</th>
            <th>Provider</th>
            <th>Category</th>
            <th>Latest Value</th>
            <th>As Of Date</th>
        </tr>
    </thead>
    <tbody>
    @foreach (var investment in Model.InvestmentsWithLatestValue.OrderBy(i => i.Name))
    {
        var latestValue = investment.Values.FirstOrDefault();
        <tr>
            <td>@investment.Name</td>
            <td>@(string.IsNullOrWhiteSpace(investment.Provider) ? "-" : investment.Provider)</td>
            <td>@investment.Category</td>
            @if (latestValue != null)
            {
                <td>@latestValue.Value.ToString("C", CultureInfo.CreateSpecificCulture(investment.Currency.ToCultureCode()))</td>
                <td>@latestValue.AsOf.ToShortDateString()</td>
            }
            else
            {
                <td class="text-muted">No value recorded</td>
                <td class="text-muted">-</td>
            }
        </tr>
    }
    </tbody>
</table>

@section Scripts {
    <script>
        const chartData = @Html.Raw(Model.ChartDataJson);
        
        for (const [currency, categories] of Object.entries(chartData)) {
            const canvas = document.getElementById(`chart-${currency}`);
            const ctx = canvas.getContext('2d');
            new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: Object.keys(categories),
                    datasets: [{
                        data: Object.values(categories),
                        backgroundColor: [
                            '#FF6384',
                            '#36A2EB',
                            '#FFCE56',
                            '#4BC0C0',
                            '#9966FF'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'bottom',
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    const value = context.parsed;
                                    return `${context.label}: ${value.toLocaleString('en-US', { style: 'currency', currency: currency })}`;
                                }
                            }
                        }
                    },
                    hover: {
                        mode: 'nearest',
                        intersect: true
                    }
                }
            });
        }

        // Time series chart
        const timeSeriesData = @Html.Raw(Model.ChartTimeSeriesJson);
        const timeSeriesCanvas = document.getElementById('historicalValueChart');
        const timeSeriesCtx = timeSeriesCanvas.getContext('2d');
        new Chart(timeSeriesCtx, {
            type: 'line',
            data: {
                labels: Object.keys(timeSeriesData),
                datasets: [{
                    label: 'Total Portfolio Value',
                    data: Object.values(timeSeriesData),
                    borderColor: 'rgb(75, 192, 192)',
                    tension: 0.1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: false,
                        ticks: {
                            callback: function(value) {
                                return value.toLocaleString();
                            }
                        }
                    },
                    x: {
                        title: {
                            display: true,
                            text: 'Date'
                        }
                    }
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function(context) {
                                return `Total Value: ${context.parsed.y.toLocaleString()}`;
                            }
                        }
                    }
                }
            }
        });
    </script>
}

<div class="card mb-4">
    <div class="card-header">
        Historical Value
        <div class="float-end">
            <div class="btn-group btn-group-sm" role="group" aria-label="Time range selector">
                <a asp-page="./Index" asp-route-TimeRange="12m" class="btn @(Model.TimeRange == "12m" ? "btn-primary" : "btn-outline-primary")">12M</a>
                <a asp-page="./Index" asp-route-TimeRange="6m" class="btn @(Model.TimeRange == "6m" ? "btn-primary" : "btn-outline-primary")">6M</a>
                <a asp-page="./Index" asp-route-TimeRange="2m" class="btn @(Model.TimeRange == "2m" ? "btn-primary" : "btn-outline-primary")">2M</a>
            </div>
        </div>
    </div>
    <div class="card-body">
        <canvas id="historicalValueChart"></canvas>
    </div>
</div>
