@page
@model InvestmentTracker.Pages.Expenses.BudgetsModel
@using System.Text.Json
@using InvestmentTracker.Models
@{
    var currentDate = new DateTime(Model.ViewModel.Year, Model.ViewModel.Month, 1);
    ViewData["Title"] = $"Manage Budgets - {currentDate.ToString("MMMM yyyy")}";
}

<h2>Manage Budgets - @currentDate.ToString("MMMM yyyy")</h2>

<form method="get" class="mb-4">
    <div class="row g-3 align-items-end">
        <div class="col-auto">
            <label for="year" class="form-label">Year</label>
            <select name="year" id="year" class="form-select">
                @for (int y = DateTime.Today.Year - 5; y <= DateTime.Today.Year + 1; y++)
                {
                    <option value="@y" selected="@(Model.ViewModel.Year == y)">@y</option>
                }
            </select>
        </div>
        <div class="col-auto">
            <label for="month" class="form-label">Month</label>
            <select name="month" id="month" class="form-select">
                @for (int m = 1; m <= 12; m++)
                {
                    <option value="@m" selected="@(Model.ViewModel.Month == m)">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(m)</option>
                }
            </select>
        </div>
        <div class="col-auto">
            <button type="submit" class="btn btn-primary w-100">View</button>
        </div>
        <div class="col-auto">
            <div class="btn-group ms-2" role="group">
                <button type="button" class="btn btn-outline-secondary" onclick="navigateMonth(-1)" title="Previous Month">
                    <i class="bi bi-chevron-left"></i> Previous
                </button>
                <button type="button" class="btn btn-outline-primary" onclick="navigateToCurrentMonth()" title="Current Month">
                    <i class="bi bi-calendar-event"></i>
                    <span class="d-none d-sm-inline ms-1">Current</span>
                </button>
                <button type="button" class="btn btn-outline-secondary" onclick="navigateMonth(1)" title="Next Month">
                    Next <i class="bi bi-chevron-right"></i>
                </button>
            </div>
        </div>
        <div class="col-auto">
            <a href="./Index?year=@Model.ViewModel.Year&month=@Model.ViewModel.Month" class="btn btn-outline-secondary w-100">
                <i class="bi bi-arrow-left"></i>
                <span class="d-none d-sm-inline ms-1">Back to Expenses</span>
                <span class="d-sm-none">Back</span>
            </a>
        </div>
    </div>
</form>

<div class="card">
    <div class="card-header">
        <h5 class="mb-0">Category Budgets</h5>
    </div>
    <div class="card-body">
        @if (Model.ViewModel.Budgets.Any())
        {
            <div class="table-responsive">
                <table class="table align-middle mb-0">
                    <thead class="table-light">
                        <tr>
                            <th>Category</th>
                            <th class="d-none d-md-table-cell">Budget</th>
                            <th>Scope</th>
                            <th class="d-none d-sm-table-cell">Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                    @foreach (var b in Model.ViewModel.Budgets.OrderByDescending(x => x.BudgetAmount.HasValue).ThenBy(x => x.CategoryName))
                    {
                        var percent = b.BudgetAmount.HasValue && b.BudgetAmount > 0 ? Math.Min(100, Math.Round(b.Percent)) : 0;
                        var barClass = b.Status == "Over" ? "bg-danger" : b.Status == "Near" ? "bg-warning" : "bg-primary";
                        <tr>
                            <td>
                                <div class="d-flex flex-column">
                                    <strong>@b.CategoryName</strong>
                                    <small class="text-muted d-md-none">
                                        @if (b.BudgetAmount.HasValue)
                                        {
                                            <text>@b.Status</text>
                                        }
                                        else
                                        {
                                            <text>No budget set</text>
                                        }
                                    </small>
                                </div>
                            </td>
                            <td class="d-none d-md-table-cell">
                                @if (b.BudgetAmount.HasValue)
                                {
                                    <div class="d-flex align-items-center gap-2">
                                        <form method="post" asp-page-handler="SetBudget" class="d-inline-flex align-items-center gap-2">
                                            <input type="hidden" name="categoryId" value="@b.CategoryId" />
                                            <input type="hidden" name="year" value="@Model.ViewModel.Year" />
                                            <input type="hidden" name="month" value="@Model.ViewModel.Month" />
                                            <div class="input-group input-group-sm" style="width: 140px;">
                                                <span class="input-group-text d-inline d-sm-none" style="font-size: 0.75rem;">Budget</span>
                                                <input name="amount" type="number" step="1" min="1" max="10000000" class="form-control" style="width: 100px;" value="@(b.BudgetAmount ?? 0)" placeholder="Amount" oninput="this.value = Math.floor(Math.abs(this.value)) || ''"/>
                                            </div>
                                            <button type="submit" class="btn btn-sm btn-primary" style="width: 40px; height: 31px;" title="Update budget for this month only (future months keep original amount)" aria-label="Update budget for this month only">
                                                <i class="bi bi-save"></i>
                                            </form>
                                    </div>
                                }
                                else
                                {
                                    <div class="d-flex align-items-center gap-2">
                                        <form method="post" asp-page-handler="SetBudget" class="d-inline-flex align-items-center gap-2">
                                            <input type="hidden" name="categoryId" value="@b.CategoryId" />
                                            <input type="hidden" name="year" value="@Model.ViewModel.Year" />
                                            <input type="hidden" name="month" value="@Model.ViewModel.Month" />
                                            <input type="hidden" name="scope" value="future" />
                                            <div class="input-group input-group-sm" style="width: 140px;">
                                                <span class="input-group-text d-inline d-sm-none" style="font-size: 0.75rem;">Budget</span>
                                                <input name="amount" type="number" step="1" min="1" max="10000000" class="form-control" style="width: 100px;" value="0" placeholder="Amount" oninput="this.value = Math.floor(Math.abs(this.value)) || ''"/>
                                            </div>
                                            <button type="submit" class="btn btn-sm btn-primary" style="width: 40px; height: 31px;" title="Create budget (applies to this month and all future months)" aria-label="Create budget">
                                                <i class="bi bi-save"></i>
                                            </button>
                                        </form>
                                    </div>
                                }
                            </td>
                            <td>
                                @if (b.BudgetAmount.HasValue)
                                {
                                    <span class="badge bg-info text-dark">Future</span>
                                }
                                else
                                {
                                    <span class="text-muted">â€”</span>
                                }
                            </td>
                            <td class="d-none d-sm-table-cell">
                                <span class="badge @(b.Status == "Over" ? "bg-danger" : b.Status == "Near" ? "bg-warning text-dark" : b.Status == "Under" ? "bg-primary" : "bg-secondary")">@b.Status</span>
                            </td>
                            <td>
                                @if (b.BudgetAmount.HasValue)
                                {
                                    <div class="d-flex gap-1">
                                        <form method="post" asp-page-handler="DeleteBudget" class="d-inline">
                                            <input type="hidden" name="categoryId" value="@b.CategoryId" />
                                            <input type="hidden" name="year" value="@Model.ViewModel.Year" />
                                            <input type="hidden" name="month" value="@Model.ViewModel.Month" />
                                            <button type="submit" class="btn btn-sm btn-outline-danger" style="width: 40px; height: 31px;" title="Delete Budget" aria-label="Delete Budget" onclick="return confirm('Delete this budget? This will remove it from the current month and all future months. This action cannot be undone.')">
                                                <i class="bi bi-trash"></i>
                                            </form>
                                            <button type="button" class="btn btn-sm btn-outline-info" style="width: 40px; height: 31px;" title="View History" aria-label="View History"
                                                onclick="showBudgetHistory(@b.CategoryId, '@b.CategoryName')">
                                                <i class="bi bi-clock-history"></i>
                                            </button>
                                        </div>
                                }
                                else
                                {
                                    <span class="text-muted">â€”</span>
                                }
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="text-center text-muted">No categories found.</div>
        }
    </div>
    <div class="card-footer text-muted small">
        Near threshold at 80%. Over at 100%. Leftover does not carry over.
        <br>
        <strong>Budget Scope:</strong> All budgets apply to the current month and all future months.
        <br>
        <em>Historical budgets remain unchanged for data integrity.</em>
    </div>
</div>

<!-- Budget History Modal -->
<div class="modal fade" id="budgetHistoryModal" tabindex="-1" aria-labelledby="budgetHistoryModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="budgetHistoryModalLabel">Budget History</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="budgetHistoryContent">
                    <!-- History content will be loaded here -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Initialize tooltips
        document.addEventListener('DOMContentLoaded', function() {
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            const tooltipList = tooltipTriggerList.map(function(tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });

            // Add client-side validation for budget amounts
            const budgetInputs = document.querySelectorAll('input[name="amount"]');
            budgetInputs.forEach(input => {
                input.addEventListener('input', validateBudgetAmount);
                input.addEventListener('blur', validateBudgetAmount);
            });
        });

        function validateBudgetAmount(event) {
            const input = event.target;
            const value = parseFloat(input.value);
            const errorDiv = input.parentElement.querySelector('.invalid-feedback') || createErrorDiv(input);

            // Clear previous validation
            input.classList.remove('is-invalid', 'is-valid');
            errorDiv.textContent = '';

            if (isNaN(value) || value <= 0) {
                input.classList.add('is-invalid');
                errorDiv.textContent = 'Budget amount must be greater than zero';
                return false;
            }

            if (value > 10000000.00) {
                input.classList.add('is-invalid');
                errorDiv.textContent = 'Budget amount cannot exceed 10,000,000';
                return false;
            }

            // Check for whole numbers only
            if (value % 1 !== 0) {
                input.classList.add('is-invalid');
                errorDiv.textContent = 'Budget amount must be a whole number';
                return false;
            }

            input.classList.add('is-valid');
            return true;
        }

        function createErrorDiv(input) {
            const errorDiv = document.createElement('div');
            errorDiv.className = 'invalid-feedback';
            input.parentElement.appendChild(errorDiv);
            return errorDiv;
        }

        // Form validation before submission
        function validateBudgetForm(form) {
            const amountInput = form.querySelector('input[name="amount"]');
            if (amountInput && !validateBudgetAmount({ target: amountInput })) {
                amountInput.focus();
                return false;
            }
            return true;
        }

        // Attach form validation to all budget forms
        document.addEventListener('DOMContentLoaded', function() {
            const budgetForms = document.querySelectorAll('form[method="post"]');
            budgetForms.forEach(form => {
                form.addEventListener('submit', function(e) {
                    if (!validateBudgetForm(form)) {
                        e.preventDefault();
                        return false;
                    }
                });
            });
        });

        // Budget history functionality
        async function showBudgetHistory(categoryId, categoryName) {
            const modal = new bootstrap.Modal(document.getElementById('budgetHistoryModal'));
            const content = document.getElementById('budgetHistoryContent');
            const modalLabel = document.getElementById('budgetHistoryModalLabel');

            modalLabel.textContent = `Budget History - ${categoryName}`;
            content.innerHTML = '<div class="text-center"><div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div></div>';

            try {
                const response = await fetch(`/Expenses/Budgets?handler=BudgetHistory&categoryId=${categoryId}`);
                if (response.ok) {
                    const html = await response.text();
                    content.innerHTML = html;
                } else {
                    content.innerHTML = '<div class="alert alert-danger">Failed to load budget history.</div>';
                }
            } catch (error) {
                content.innerHTML = '<div class="alert alert-danger">Error loading budget history.</div>';
            }

            modal.show();
        }

        // Month navigation functions
        window.navigateMonth = function(direction) {
            const currentYear = @Model.ViewModel.Year;
            const currentMonth = @Model.ViewModel.Month;
            
            let newYear = currentYear;
            let newMonth = currentMonth + direction;
            
            // Handle year transitions
            if (newMonth < 1) {
                newMonth = 12;
                newYear = currentYear - 1;
            } else if (newMonth > 12) {
                newMonth = 1;
                newYear = currentYear + 1;
            }
            
            // Navigate to the new month
            const url = `?year=${newYear}&month=${newMonth}`;
            window.location.href = url;
        };

        window.navigateToCurrentMonth = function() {
            const currentDate = new Date();
            const currentYear = currentDate.getFullYear();
            const currentMonth = currentDate.getMonth() + 1; // JavaScript months are 0-based
            
            // Navigate to current month
            const url = `?year=${currentYear}&month=${currentMonth}`;
            window.location.href = url;
        };
    </script>
}
