@page "/expenses/regular"
@model InvestmentTracker.Pages.Expenses.RegularModel
@{
    ViewData["Title"] = "Recurring Expenses";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2><i class="bi bi-calendar-check text-primary me-2"></i>Recurring Expenses</h2>
                <div>
                    <a href="/expenses" class="btn btn-secondary me-2">
                        <i class="bi bi-arrow-left me-1"></i>Back to Dashboard
                    </a>
                    <button type="button" class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#addExpenseModal" title="Add Expense" aria-label="Add Expense">
                        <i class="bi bi-plus-lg"></i>
                        <span class="d-none d-sm-inline ms-1">Add Expense <kbd>A</kbd></span>
                    </button>
                </div>
            </div>

            @if (!Model.RegularExpenses.Any())
            {
                <div class="alert alert-info">
                    <i class="bi bi-info-circle me-2"></i>
                    No regular expenses defined yet. <a href="#" data-bs-toggle="modal" data-bs-target="#addExpenseModal">Add your first regular expense</a>.
                </div>
            }
            else
            {
                <!-- Filter and Sort Controls -->
                <div class="card mb-4">
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-md-3">
                                <label class="form-label">Filter by Category</label>
                                <select class="form-select" id="categoryFilter">
                                    <option value="">All Categories</option>
                                    @foreach (var category in Model.Categories)
                                    {
                                        <option value="@category.Id">@category.Name</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">Filter by Frequency</label>
                                <select class="form-select" id="frequencyFilter">
                                    <option value="">All Frequencies</option>
                                    <option value="Monthly">Monthly</option>
                                    <option value="Quarterly">Quarterly</option>
                                    <option value="SemiAnnually">Semi-Annually</option>
                                    <option value="Annually">Annually</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label class="form-label">Sort By</label>
                                <select class="form-select" id="sortBy">
                                    <option value="name">Name</option>
                                    <option value="amount">Amount</option>
                                    <option value="category">Category</option>
                                    <option value="frequency">Frequency</option>
                                    <option value="startDate">Start Date</option>
                                    <option value="nextDue">Next Due</option>
                                </select>
                            </div>
                            <div class="col-md-3 d-flex align-items-end">
                                <button class="btn btn-secondary w-100" onclick="clearFilters()">
                                    <i class="bi bi-x-lg me-1"></i>Clear Filters
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Summary Cards -->
                <div class="row mb-4">
                    <div class="col-md-3">
                        <div class="card text-center">
                            <div class="card-body">
                                <h5 class="card-title text-primary">@Model.RegularExpenses.Count</h5>
                                <p class="card-text">Total Recurring Expenses</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-center">
                            <div class="card-body">
                                <h5 class="card-title text-success">@Model.TotalMonthlyAmount.ToString("C", new System.Globalization.CultureInfo("cs-CZ"))</h5>
                                <p class="card-text">Monthly Average</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-center">
                            <div class="card-body">
                                <h5 class="card-title text-info">@Model.AlternativeScheduleCount</h5>
                                <p class="card-text">Alternative Schedules</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-center">
                            <div class="card-body">
                                <h5 class="card-title text-warning">@Model.TotalAnnualAmount.ToString("C", new System.Globalization.CultureInfo("cs-CZ"))</h5>
                                <p class="card-text">Annual Total</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Expenses Table -->
                <div class="card">
                    <div class="card-body">
                        @{
                            var today = DateTime.Now;
                            var upcoming = Model.RegularExpenses
                                .Where(e => e.Recurrence != InvestmentTracker.Models.Frequency.Monthly)
                                .Select(e => new { Expense = e, Next = Model.GetNextDueDate(e) })
                                .Where(x => x.Next.HasValue)
                                .Select(x => new
                                {
                                    x.Expense,
                                    Next = x.Next!.Value,
                                    MonthsUntil = (x.Next!.Value.Year - today.Year) * 12 + x.Next!.Value.Month - today.Month
                                })
                                .Where(x => x.MonthsUntil >= 0 && x.MonthsUntil <= 2)
                                .OrderBy(x => x.Next)
                                .ToList();
                        }

                        @if (upcoming.Any())
                        {
                            <div class="alert alert-info py-2 mb-3" role="alert">
                                <small>
                                    <i class="bi bi-info-circle me-1"></i>
                                    <strong>Upcoming non-monthly expenses:</strong>
                                    @{
                                        var items = upcoming
                                            .Select(x => $"{x.Expense.Name} ({x.Next:MMM yyyy})");
                                        var list = string.Join(", ", items.Take(5));
                                        var extra = Math.Max(0, items.Count() - 5);
                                    }
                                    @list@if (extra > 0) { <text> + @extra more</text>; }
                                </small>
                            </div>
                        }
                        <div class="table-responsive" style="max-height: calc(100vh - 400px); overflow-y: auto;">
                            <table class="table table-striped mb-0" id="expensesTable">
                                <thead>
                                    <tr>
                                        <th>
                                            <input type="checkbox" id="selectAll" title="Select All">
                                        </th>
                                        <th>Expense</th>
                                        <th>Category</th>
                                        <th>Amount</th>
                                        <th>Frequency</th>
                                        <th>Start Date</th>
                                        <th>Schedule Details</th>
                                        <th>Next Due</th>
                                        <th>Annual Impact</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var expense in Model.RegularExpenses)
                                    {
                                        <tr data-category="@expense.ExpenseCategoryId" data-frequency="@expense.Recurrence">
                                            <td>
                                                <input type="checkbox" class="expense-checkbox" value="@expense.Id" title="Select @expense.Name">
                                            </td>
                                            <td>
                                                @if (expense.IsAlternativeSchedule)
                                                {
                                                    <i class="bi bi-calendar-event text-warning me-2" title="Alternative Schedule"></i>
                                                }
                                                <strong>@expense.Name</strong>
                                                @if (!string.IsNullOrWhiteSpace(expense.Description))
                                                {
                                                    <br><small class="text-muted">@expense.Description</small>
                                                }
                                            </td>
                                            <td>
                                                <span class="badge bg-secondary">@(expense.Category?.Name ?? "Unknown")</span>
                                            </td>
                                            <td class="text-end">
                                                <strong>@expense.Amount.ToString("C", new System.Globalization.CultureInfo("cs-CZ"))</strong>
                                            </td>
                                            <td>
                                                @if (expense.FrequencyDisplay == "Monthly")
                                                {
                                                    <span class="badge bg-primary">Monthly</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-warning text-dark">@expense.FrequencyDisplay</span>
                                                }
                                            </td>
                                            <td>
                                                @{
                                                    var scheduleForStartDate = expense.Schedules.FirstOrDefault();
                                                }
                                                @if (scheduleForStartDate != null)
                                                {
                                                    <span title="@scheduleForStartDate.StartDate.ToString("dddd, MMMM d, yyyy")">
                                                        @scheduleForStartDate.StartDate.ToString("MMM d, yyyy")
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                            <td>
                                                <div>
                                                    @Html.Raw(Model.GetDetailedSchedule(expense))
                                                    @{
                                                        var currentSchedule = expense.Schedules.FirstOrDefault();
                                                    }
                                                    @if (currentSchedule != null && expense.Recurrence != InvestmentTracker.Models.Frequency.Monthly)
                                                    {
                                                        <br><small class="text-muted">
                                                            Starts: @(new DateTime(currentSchedule.StartYear, currentSchedule.StartMonth, 1).ToString("MMM yyyy"))
                                                            @if (currentSchedule.EndYear.HasValue && currentSchedule.EndMonth.HasValue)
                                                            {
                                                                <br />@:Ends: @(new DateTime(currentSchedule.EndYear.Value, currentSchedule.EndMonth.Value, 1).ToString("MMM yyyy"))
                                                            }
                                                        </small>
                                                    }
                                                </div>
                                            </td>
                                            <td>
                                                @{
                                                    var nextDue = Model.GetNextDueDate(expense);
                                                }
                                                @if (nextDue.HasValue)
                                                {
                                                    var monthsUntil = (nextDue.Value.Year - DateTime.Now.Year) * 12 + nextDue.Value.Month - DateTime.Now.Month;
                                                    <span class="@(monthsUntil <= 1 ? "text-warning fw-bold" : "")">
                                                        @nextDue.Value.ToString("MMMM yyyy")
                                                    </span>
                                                    @if (monthsUntil <= 1)
                                                    {
                                                        <br><small class="text-warning">Due soon!</small>
                                                    }
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                            <td class="text-end">
                                                @{
                                                    var annualAmount = expense.Recurrence switch
                                                    {
                                                        InvestmentTracker.Models.Frequency.Monthly => expense.Amount * 12,
                                                        InvestmentTracker.Models.Frequency.Quarterly => expense.Amount * 4,
                                                        InvestmentTracker.Models.Frequency.SemiAnnually => expense.Amount * 2,
                                                        InvestmentTracker.Models.Frequency.Annually => expense.Amount,
                                                        _ => expense.Amount * 12
                                                    };
                                                }
                                                <strong>@annualAmount.ToString("C", new System.Globalization.CultureInfo("cs-CZ"))</strong>
                                            </td>
                                            <td>
                                                <div class="d-flex flex-wrap align-items-center gap-2">
                                                    <button type="button" class="btn btn-sm btn-secondary" onclick="editExpense(@expense.Id)" title="Edit" aria-label="Edit">
                                                        <i class="bi bi-pencil"></i>
                                                    </button>
                                                    <button type="button" class="btn btn-sm btn-danger" onclick="deleteExpense(@expense.Id, '@expense.Name')" title="Delete" aria-label="Delete">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Add/Edit Expense Modal -->
<div class="modal fade" id="addExpenseModal" tabindex="-1">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <form id="expenseForm">
                @Html.AntiForgeryToken()
}
                <div class="modal-header">
                    <h5 class="modal-title">Add Recurring Expense</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <input type="hidden" id="expenseId" value="0">
                    
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">Name <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="expenseName" required>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Category <span class="text-danger">*</span></label>
                            <select class="form-select" id="expenseCategory" required>
                                <option value="">Select a category</option>
                                @foreach (var category in Model.Categories)
                                {
                                    <option value="@category.Id">@category.Name</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Amount <span class="text-danger">*</span></label>
                            <input type="number" class="form-control" id="expenseAmount" step="0.01" min="0" required>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Frequency <span class="text-danger">*</span></label>
                            <select class="form-select" id="expenseFrequency" required>
                                <option value="">Select frequency</option>
                                <option value="Monthly">Monthly</option>
                                <option value="Quarterly">Quarterly (every 3 months)</option>
                                <option value="SemiAnnually">Semi-Annually (every 6 months)</option>
                                <option value="Annually">Annually (once per year)</option>
                            </select>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label">Start Date <span class="text-danger">*</span></label>
                            <div class="row g-2">
                                <div class="col-4">
                                    <select class="form-select" id="expenseStartYear" required>
                                        @for (int y = DateTime.Today.Year - 1; y <= DateTime.Today.Year + 5; y++)
                                        {
                                            <option value="@y" selected="@(y == DateTime.Today.Year)">@y</option>
                                        }
                                    </select>
                                </div>
                                <div class="col-4">
                                    <select class="form-select" id="expenseStartMonth" required>
                                        @for (int m = 1; m <= 12; m++)
                                        {
                                            <option value="@m" selected="@(m == DateTime.Today.Month)">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(m)</option>
                                        }
                                    </select>
                                </div>
                                <div class="col-4">
                                    <input type="number" class="form-control" id="expenseStartDay" min="1" max="31" value="1" required>
                                </div>
                            </div>
                            <div class="form-text">Select year, month, and day when this expense should start (e.g., 2025, September, 15).</div>
                        </div>
                        <div class="col-12">
                            <label class="form-label">Description</label>
                            <textarea class="form-control" id="expenseDescription" rows="2"></textarea>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save Expense</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Bulk Actions Bar -->
<div id="bulkActionsBar" class="d-none">
    <div class="container-fluid">
        <div class="row">
            <div class="col-12">
                <div class="alert alert-info py-2 mb-0 d-flex justify-content-between align-items-center">
                    <div>
                        <strong><span id="selectedCount">0</span> expense(s) selected</strong>
                    </div>
                    <div>
                        <button type="button" class="btn btn-sm btn-warning me-2" onclick="showBulkUpdateModal()">
                            <i class="bi bi-calendar-event me-1"></i>Update Start Date
                        </button>
                        <button type="button" class="btn btn-sm btn-secondary" onclick="clearSelection()">
                            <i class="bi bi-x-lg me-1"></i>Clear Selection
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Bulk Update Modal -->
<div class="modal fade" id="bulkUpdateModal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <form id="bulkUpdateForm">
                @Html.AntiForgeryToken()
                <div class="modal-header">
                    <h5 class="modal-title">Bulk Update Start Date</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle me-2"></i>
                        This will update the start date for <strong><span id="bulkUpdateCount">0</span> selected expense(s)</strong>.
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">New Start Date <span class="text-danger">*</span></label>
                        <div class="row g-2">
                            <div class="col-4">
                                <select class="form-select" id="bulkStartYear" required>
                                    @for (int y = DateTime.Today.Year - 1; y <= DateTime.Today.Year + 5; y++)
                                    {
                                        <option value="@y" selected="@(y == DateTime.Today.Year)">@y</option>
                                    }
                                </select>
                            </div>
                            <div class="col-4">
                                <select class="form-select" id="bulkStartMonth" required>
                                    @for (int m = 1; m <= 12; m++)
                                    {
                                        <option value="@m" selected="@(m == DateTime.Today.Month)">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(m)</option>
                                    }
                                </select>
                            </div>
                            <div class="col-4">
                                <input type="number" class="form-control" id="bulkStartDay" min="1" max="31" value="1" required>
                            </div>
                        </div>
                        <div class="form-text">Select year, month, and day for the new start date.</div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-warning">Update Start Dates</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <style>
        /* Match dashboard table look */
        #expensesTable thead th {
            background-color: transparent; /* let Bootstrap defaults apply */
            color: inherit;
        }

        /* Custom scrollbar for better UX */
        .table-responsive::-webkit-scrollbar {
            width: 8px;
        }
        
        .table-responsive::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 4px;
        }
        
        .table-responsive::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 4px;
        }
        
        .table-responsive::-webkit-scrollbar-thumb:hover {
            background: #a8a8a8;
        }
        
        /* Ensure modal appears above sticky elements */
        .modal {
            z-index: 1060;
        }

        /* Bulk actions bar styling */
        #bulkActionsBar {
            position: sticky;
            top: 0;
            z-index: 100;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        #bulkActionsBar .alert {
            margin-bottom: 0;
            border-radius: 0;
        }

        /* Checkbox styling */
        .expense-checkbox {
            transform: scale(1.2);
            cursor: pointer;
        }

        #selectAll {
            transform: scale(1.3);
            cursor: pointer;
        }

        /* Highlight selected rows */
        .table tbody tr.selected {
            background-color: #e3f2fd !important;
        }
    </style>
    
    <script>

        // Bulk selection functionality
        let selectedExpenses = new Set();

        function updateBulkActions() {
            const count = selectedExpenses.size;
            const bulkActionsBar = document.getElementById('bulkActionsBar');
            const selectedCount = document.getElementById('selectedCount');
            const bulkUpdateCount = document.getElementById('bulkUpdateCount');

            if (bulkActionsBar && selectedCount && bulkUpdateCount) {
                if (count > 0) {
                    bulkActionsBar.classList.remove('d-none');
                    selectedCount.textContent = count;
                    bulkUpdateCount.textContent = count;
                } else {
                    bulkActionsBar.classList.add('d-none');
                }
            }
        }

        function clearSelection() {
            selectedExpenses.clear();
            document.querySelectorAll('.expense-checkbox').forEach(checkbox => {
                checkbox.checked = false;
            });
            document.getElementById('selectAll').checked = false;
            updateBulkActions();
        }

        function showBulkUpdateModal() {
            if (selectedExpenses.size === 0) {
                Toast.warning('Please select at least one expense to update.');
                return;
            }
            new bootstrap.Modal(document.getElementById('bulkUpdateModal')).show();
        }

        // Event listeners for checkboxes
        document.addEventListener('DOMContentLoaded', function() {
            // Select All checkbox
            const selectAllCheckbox = document.getElementById('selectAll');
            if (selectAllCheckbox) {
                selectAllCheckbox.addEventListener('change', function(e) {
                    const isChecked = e.target.checked;
                    document.querySelectorAll('.expense-checkbox').forEach(checkbox => {
                        checkbox.checked = isChecked;
                        const expenseId = parseInt(checkbox.value);
                        if (isChecked) {
                            selectedExpenses.add(expenseId);
                        } else {
                            selectedExpenses.delete(expenseId);
                        }
                    });
                    updateBulkActions();
                });
            }

            // Individual checkboxes
            document.addEventListener('change', function(e) {
                if (e.target.classList.contains('expense-checkbox')) {
                    const expenseId = parseInt(e.target.value);
                    if (e.target.checked) {
                        selectedExpenses.add(expenseId);
                    } else {
                        selectedExpenses.delete(expenseId);
                    }

                    // Update select all checkbox state
                    const allCheckboxes = document.querySelectorAll('.expense-checkbox');
                    const checkedCheckboxes = document.querySelectorAll('.expense-checkbox:checked');
                    const selectAllCheckbox2 = document.getElementById('selectAll');
                    
                    if (selectAllCheckbox2) {
                        if (checkedCheckboxes.length === 0) {
                            selectAllCheckbox2.checked = false;
                            selectAllCheckbox2.indeterminate = false;
                        } else if (checkedCheckboxes.length === allCheckboxes.length) {
                            selectAllCheckbox2.checked = true;
                            selectAllCheckbox2.indeterminate = false;
                        } else {
                            selectAllCheckbox2.checked = false;
                            selectAllCheckbox2.indeterminate = true;
                        }
                    }

                    updateBulkActions();
                }
            });
        });

        // Bulk update form submission
        const bulkUpdateForm = document.getElementById('bulkUpdateForm');
        if (bulkUpdateForm) {
            bulkUpdateForm.addEventListener('submit', function(e) {
                e.preventDefault();

                if (selectedExpenses.size === 0) {
                    Toast.warning('No expenses selected for update.');
                    return;
                }

                const bulkStartYearEl = document.getElementById('bulkStartYear');
                const bulkStartMonthEl = document.getElementById('bulkStartMonth');
                const bulkStartDayEl = document.getElementById('bulkStartDay');

                if (!bulkStartYearEl || !bulkStartMonthEl || !bulkStartDayEl) {
                    Toast.error('Form is missing required fields. Please reload the page.');
                    return;
                }

                const formData = new FormData();
                formData.append('expenseIds', Array.from(selectedExpenses).join(','));
                formData.append('startYear', bulkStartYearEl.value);
                formData.append('startMonth', bulkStartMonthEl.value);
                formData.append('startDay', bulkStartDayEl.value);

                fetch('/expenses/regular?handler=BulkUpdateStartDate', {
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Close modal and clear selection
                        const bulkUpdateModal = document.getElementById('bulkUpdateModal');
                        if (bulkUpdateModal) {
                            bootstrap.Modal.getInstance(bulkUpdateModal).hide();
                        }
                        clearSelection();
                        
                        // Show success message and reload
                        Toast.success(data.message);
                        setTimeout(() => location.reload(), 1500);
                    } else {
                        Toast.error('Error updating expenses: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Toast.error('An error occurred while updating the expenses.');
                });
            });
        }

        // Reset bulk update modal when closed
        const bulkUpdateModal = document.getElementById('bulkUpdateModal');
        if (bulkUpdateModal) {
            bulkUpdateModal.addEventListener('hidden.bs.modal', function() {
                const bulkUpdateForm = document.getElementById('bulkUpdateForm');
                if (bulkUpdateForm) {
                    bulkUpdateForm.reset();
                }
            });
        }

        function clearFilters() {
            const categoryFilter = document.getElementById('categoryFilter');
            const frequencyFilter = document.getElementById('frequencyFilter');
            const sortBy = document.getElementById('sortBy');
            
            if (categoryFilter) categoryFilter.value = '';
            if (frequencyFilter) frequencyFilter.value = '';
            if (sortBy) sortBy.value = 'name';
            
            filterAndSortTable();
        }

        function filterAndSortTable() {
            const categoryFilter = document.getElementById('categoryFilter');
            const frequencyFilter = document.getElementById('frequencyFilter');
            const sortBy = document.getElementById('sortBy');
            const tbody = document.querySelector('#expensesTable tbody');
            
            if (!tbody) return;
            
            const categoryFilterValue = categoryFilter ? categoryFilter.value : '';
            const frequencyFilterValue = frequencyFilter ? frequencyFilter.value : '';
            const sortByValue = sortBy ? sortBy.value : 'name';
            
            const rows = Array.from(tbody.querySelectorAll('tr'));

            // Filter rows
            rows.forEach(row => {
                const category = row.dataset.category;
                const frequency = row.dataset.frequency;
                
                const categoryMatch = !categoryFilterValue || category === categoryFilterValue;
                const frequencyMatch = !frequencyFilterValue || frequency === frequencyFilterValue;
                
                row.style.display = categoryMatch && frequencyMatch ? '' : 'none';
            });

            // Sort visible rows
            const visibleRows = rows.filter(row => row.style.display !== 'none');
            
            visibleRows.sort((a, b) => {
                let aValue, bValue;
                
                switch (sortByValue) {
                    case 'name':
                        aValue = a.cells[1].textContent.trim().toLowerCase();
                        bValue = b.cells[1].textContent.trim().toLowerCase();
                        break;
                    case 'amount':
                        aValue = parseFloat(a.cells[3].textContent.replace(/[^0-9.-]/g, ''));
                        bValue = parseFloat(b.cells[3].textContent.replace(/[^0-9.-]/g, ''));
                        return bValue - aValue; // Descending for amount
                    case 'category':
                        aValue = a.cells[2].textContent.trim().toLowerCase();
                        bValue = b.cells[2].textContent.trim().toLowerCase();
                        break;
                    case 'frequency':
                        aValue = a.cells[4].textContent.trim().toLowerCase();
                        bValue = b.cells[4].textContent.trim().toLowerCase();
                        break;
                    case 'startDate':
                        aValue = a.cells[5].textContent.trim();
                        bValue = b.cells[5].textContent.trim();
                        break;
                    case 'nextDue':
                        aValue = a.cells[7].textContent.trim();
                        bValue = b.cells[7].textContent.trim();
                        break;
                    default:
                        return 0;
                }
                
                if (sortByValue !== 'amount') {
                    return aValue.localeCompare(bValue);
                }
            });

            // Reorder the DOM
            visibleRows.forEach(row => tbody.appendChild(row));
        }

        // Event listeners
        const categoryFilter = document.getElementById('categoryFilter');
        const frequencyFilter = document.getElementById('frequencyFilter');
        const sortBy = document.getElementById('sortBy');
        
        if (categoryFilter) categoryFilter.addEventListener('change', filterAndSortTable);
        if (frequencyFilter) frequencyFilter.addEventListener('change', filterAndSortTable);
        if (sortBy) sortBy.addEventListener('change', filterAndSortTable);

        function editExpense(id) {
            fetch(`/expenses/regular?handler=ExpenseDetails&id=${id}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Populate the form with expense data
                        document.getElementById('expenseId').value = data.expense.id;
                        document.getElementById('expenseName').value = data.expense.name;
                        document.getElementById('expenseCategory').value = data.expense.categoryId;
                        document.getElementById('expenseAmount').value = data.expense.amount;
                        document.getElementById('expenseFrequency').value = data.expense.frequency;
                        document.getElementById('expenseStartYear').value = data.expense.startYear;
                        document.getElementById('expenseStartMonth').value = data.expense.startMonth;
                        document.getElementById('expenseStartDay').value = data.expense.startDay;
                        document.getElementById('expenseDescription').value = data.expense.description || '';

                        // Update modal title
                        document.querySelector('#addExpenseModal .modal-title').textContent = 'Edit Recurring Expense';

                        // Show the modal
                        new bootstrap.Modal(document.getElementById('addExpenseModal')).show();
                    } else {
                        Toast.error('Error loading expense details: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Toast.error('An error occurred while loading expense details.');
                });
        }

        function deleteExpense(id, name) {
            if (confirm(`Are you sure you want to delete "${name}"?`)) {
                fetch('/expenses/regular?handler=Delete', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: `id=${id}`
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload(); // Reload to reflect changes
                    } else {
                        Toast.error('Error deleting expense: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Toast.error('An error occurred while deleting the expense.');
                });
            }
        }

        const expenseForm = document.getElementById('expenseForm');
        if (expenseForm) {
            expenseForm.addEventListener('submit', function(e) {
                e.preventDefault();

                const formData = new FormData();
                const expenseIdEl = document.getElementById('expenseId');
                const expenseNameEl = document.getElementById('expenseName');
                const expenseCategoryEl = document.getElementById('expenseCategory');
                const expenseAmountEl = document.getElementById('expenseAmount');
                const expenseFrequencyEl = document.getElementById('expenseFrequency');
                const expenseStartYearEl = document.getElementById('expenseStartYear');
                const expenseStartMonthEl = document.getElementById('expenseStartMonth');
                const expenseStartDayEl = document.getElementById('expenseStartDay');
                const expenseDescriptionEl = document.getElementById('expenseDescription');

                if (!expenseIdEl || !expenseNameEl || !expenseCategoryEl || !expenseAmountEl || !expenseFrequencyEl || !expenseStartYearEl || !expenseStartMonthEl || !expenseStartDayEl || !expenseDescriptionEl) {
                    Toast.error('Form is missing required fields. Please reload the page.');
                    return;
                }

                formData.append('id', expenseIdEl.value);
                formData.append('name', expenseNameEl.value);
                formData.append('categoryId', expenseCategoryEl.value);
                formData.append('amount', expenseAmountEl.value);
                formData.append('frequency', expenseFrequencyEl.value);
                formData.append('startYear', expenseStartYearEl.value);
                formData.append('startMonth', expenseStartMonthEl.value);
                formData.append('startDay', expenseStartDayEl.value);
                formData.append('description', expenseDescriptionEl.value);

                const isEdit = expenseIdEl.value && expenseIdEl.value !== '0';
                const handler = isEdit ? 'Update' : 'Create';

                fetch(`/expenses/regular?handler=${handler}`, {
                    method: 'POST',
                    headers: {
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        Toast.success('Expense saved successfully!');
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        Toast.error('Error saving expense: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    Toast.error('An error occurred while saving the expense.');
                });
            });
        }

        // Reset form when modal is closed
        const addExpenseModal = document.getElementById('addExpenseModal');
        if (addExpenseModal) {
            addExpenseModal.addEventListener('hidden.bs.modal', function() {
                const expenseForm = document.getElementById('expenseForm');
                const expenseId = document.getElementById('expenseId');
                const modalTitle = document.querySelector('#addExpenseModal .modal-title');
                
                if (expenseForm) expenseForm.reset();
                if (expenseId) expenseId.value = '0';
                if (modalTitle) modalTitle.textContent = 'Add Recurring Expense';
            });
        }

        // Keyboard shortcuts
        document.addEventListener('keydown', function(event) {
            // Don't trigger shortcuts when user is typing in input fields
            if (event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA' || event.target.tagName === 'SELECT') {
                return;
            }

            // Don't trigger shortcuts when modal is open
            if (document.querySelector('.modal.show')) {
                return;
            }

            // Don't trigger shortcuts when modifier keys are pressed (Cmd, Ctrl, Alt, Shift)
            if (event.metaKey || event.ctrlKey || event.altKey || event.shiftKey) {
                return;
            }

            switch(event.key) {
                case 'a':
                case 'A':
                    event.preventDefault();
                    // Reset form and show add modal
                    const expenseForm = document.getElementById('expenseForm');
                    const expenseId = document.getElementById('expenseId');
                    const modalTitle = document.querySelector('#addExpenseModal .modal-title');
                    const addExpenseModal = document.getElementById('addExpenseModal');
                    
                    if (expenseForm) expenseForm.reset();
                    if (expenseId) expenseId.value = '0';
                    if (modalTitle) modalTitle.textContent = 'Add Recurring Expense';
                    if (addExpenseModal) {
                        new bootstrap.Modal(addExpenseModal).show();
                    }
                    break;
            }
        });
    </script>
}
