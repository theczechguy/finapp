@page
@model InvestmentTracker.Pages.Expenses.IndexModel
@using System.Text.Json
@using InvestmentTracker.Models
@{
    var currentDate = new DateTime(Model.ViewModel.Year, Model.ViewModel.Month, 1);
    ViewData["Title"] = $"Monthly Expenses - {currentDate.ToString("MMMM yyyy")}";
}

<h2>Monthly Expenses - @currentDate.ToString("MMMM yyyy")</h2>

<form method="get" class="mb-4">
    <div class="row g-3 align-items-end">
        <div class="col-auto">
            <label for="year" class="form-label">Year</label>
            <select name="year" id="year" class="form-select">
                @for (int y = DateTime.Today.Year - 5; y <= DateTime.Today.Year + 1; y++)
                {
                    <option value="@y" selected="@(Model.ViewModel.Year == y)">@y</option>
                }
            </select>
        </div>
        <div class="col-auto">
            <label for="month" class="form-label">Month</label>
            <select name="month" id="month" class="form-select">
                @for (int m = 1; m <= 12; m++)
                {
                    <option value="@m" selected="@(Model.ViewModel.Month == m)">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(m)</option>
                }
            </select>
        </div>
        <div class="col-auto">
            <button type="submit" class="btn btn-primary">View</button>
        </div>
        <div class="col-auto">
            <div class="btn-group ms-2" role="group">
                <button type="button" class="btn btn-secondary" onclick="navigateMonth(-1)" title="Previous Month">
                    <i class="bi bi-chevron-left"></i> Previous
                </button>
                <button type="button" class="btn btn-primary" onclick="navigateToCurrentMonth()" title="Current Month">
                    <i class="bi bi-calendar-event"></i>
                    <span class="d-none d-sm-inline ms-1">Current</span>
                </button>
                <button type="button" class="btn btn-secondary" onclick="navigateMonth(1)" title="Next Month">
                    Next <i class="bi bi-chevron-right"></i>
                </button>
            </div>
        </div>
    </div>
</form>

<div class="row mb-4">
    <div class="col-md-4">
        <div class="card text-center">
            <div class="card-body">
                <h5 class="card-title text-success">@Model.ViewModel.TotalIncome.ToString("C", new System.Globalization.CultureInfo("cs-CZ"))</h5>
                <p class="card-text">Total Income</p>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card text-center">
            <div class="card-body">
                <h5 class="card-title text-danger">@Model.ViewModel.TotalExpenses.ToString("C", new System.Globalization.CultureInfo("cs-CZ"))</h5>
                <p class="card-text">Total Expenses</p>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card text-center">
            <div class="card-body">
                <h5 class="card-title @(Model.ViewModel.NetBalance >= 0 ? "text-primary" : "text-warning")">@Model.ViewModel.NetBalance.ToString("C", new System.Globalization.CultureInfo("cs-CZ"))</h5>
                <p class="card-text">Net Balance</p>
            </div>
        </div>
    </div>
</div>

<div class="row mt-4">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <button class="btn btn-sm btn-link p-0 text-decoration-none text-body d-flex align-items-center" type="button" data-bs-toggle="collapse" data-bs-target="#regularIncomesCollapse" aria-expanded="true" aria-controls="regularIncomesCollapse" id="regularIncomesToggleBtn" aria-label="Toggle Regular Incomes" title="Collapse/Expand">
                    <i class="bi bi-caret-down-fill me-1" id="regularIncomesChevron"></i>
                    <span class="fw-semibold">Regular Incomes</span>
                </button>
                <a asp-page="./IncomeSources" class="btn btn-sm btn-primary">Manage Sources</a>
            </div>
            <div class="card-body collapse show" id="regularIncomesCollapse">
                <div class="table-responsive">
                <table class="table table-striped mb-0">
                    <thead>
                        <tr>
                            <th>Source</th>
                            <th>Expected</th>
                            <th>Actual</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var income in Model.ViewModel.Incomes)
                        {
                            <tr>
                                <form method="post" asp-page-handler="UpdateIncome" data-loading="Updating income...">
                                    <td>@income.Name</td>
                                    <td>@income.ExpectedAmount.ToString("C", new System.Globalization.CultureInfo(income.Currency.ToCultureCode()))</td>
                                    <td>
                                        <input type="text" name="actualAmount" value="@income.ActualAmount" class="form-control" />
                                        <input type="hidden" name="incomeSourceId" value="@income.IncomeSourceId" />
                                        <input type="hidden" name="year" value="@Model.ViewModel.Year" />
                                        <input type="hidden" name="month" value="@Model.ViewModel.Month" />
                                    </td>
                                    <td>
                                        <button type="submit" class="btn btn-sm btn-primary" title="Update" aria-label="Update">
                                            <i class="bi bi-save"></i>
                                        </button>
                                    </td>
                                </form>
                            </tr>
                        }
                    </tbody>
                </table>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <button class="btn btn-sm btn-link p-0 text-decoration-none text-body d-flex align-items-center" type="button" data-bs-toggle="collapse" data-bs-target="#oneTimeIncomesCollapse" aria-expanded="true" aria-controls="oneTimeIncomesCollapse" id="oneTimeIncomesToggleBtn" aria-label="Toggle One-Time Incomes" title="Collapse/Expand">
                    <i class="bi bi-caret-down-fill me-1" id="oneTimeIncomesChevron"></i>
                    <span class="fw-semibold">One-Time Incomes</span>
                </button>
                <button type="button" class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#addOneTimeIncomeModal" title="Add Income" aria-label="Add Income">
                    <i class="bi bi-plus-lg"></i>
                    <span class="d-none d-sm-inline ms-1">Add Income <kbd>O</kbd></span>
                </button>
            </div>
            <div class="card-body collapse show" id="oneTimeIncomesCollapse">
                <div class="table-responsive">
                <table class="table table-striped mb-0">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Name</th>
                            <th>Source</th>
                            <th>Amount</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.ViewModel.OneTimeIncomes.Any())
                        {
                            @foreach (var income in Model.ViewModel.OneTimeIncomes)
                            {
                                <tr>
                                    <td>@income.Date.ToString("dd/MM/yyyy")</td>
                                    <td>@income.Name</td>
                                    <td>@(income.IncomeSource?.Name ?? "Other")</td>
                                    <td>@income.Amount.ToString("C", new System.Globalization.CultureInfo(income.Currency.ToCultureCode()))</td>
                                    <td>
                                        <div class="d-flex flex-wrap align-items-center gap-2">
                                            <button type="button" class="btn btn-sm btn-secondary align-middle" onclick="editOneTimeIncome(@income.Id)" title="Edit" aria-label="Edit">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <form method="post" asp-page-handler="DeleteOneTimeIncome" asp-route-incomeId="@income.Id" class="d-inline" data-confirm="Delete this one-time income? This action cannot be undone." data-loading="Deleting income...">
                                                <button type="submit" class="btn btn-sm btn-danger align-middle" title="Delete" aria-label="Delete">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </form>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="5" class="text-center text-muted">No one-time incomes found. <a href="#" data-bs-toggle="modal" data-bs-target="#addOneTimeIncomeModal">Add your first income</a></td>
                            </tr>
                        }
                    </tbody>
                </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Budgets Card -->
<div class="card mb-4">
    <div class="card-header d-flex justify-content-between align-items-center">
        <button class="btn btn-sm btn-link p-0 text-decoration-none text-body d-flex align-items-center" type="button" data-bs-toggle="collapse" data-bs-target="#budgetsCollapse" aria-expanded="true" aria-controls="budgetsCollapse" id="budgetsToggleBtn" aria-label="Toggle Budgets" title="Collapse/Expand">
            <i class="bi bi-caret-down-fill me-1" id="budgetsChevron"></i>
            <span class="fw-semibold">Budgets</span>
        </button>
        <a href="./Budgets?year=@Model.ViewModel.Year&month=@Model.ViewModel.Month" class="btn btn-sm btn-primary">
            <i class="bi bi-gear"></i>
            <span class="d-none d-sm-inline ms-1">Manage</span>
        </a>
    </div>
    <div class="card-body collapse show" id="budgetsCollapse">
        @if (Model.ViewModel.Budgets.Any(b => b.BudgetAmount.HasValue))
        {
            <div class="table-responsive">
                <table class="table table-striped align-middle mb-0">
                    <thead class="table-light">
                        <tr>
                            <th>Category</th>
                            <th class="text-end">Budget</th>
                            <th class="text-end">Spent</th>
                            <th style="width:40%">Progress</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                    @foreach (var b in Model.ViewModel.Budgets.Where(b => b.BudgetAmount.HasValue).OrderByDescending(x => x.BudgetAmount.HasValue).ThenBy(x => x.CategoryName))
                    {
                        var percent = b.BudgetAmount.HasValue && b.BudgetAmount > 0 ? Math.Min(100, Math.Round(b.Percent)) : 0;
                        var barClass = b.Status == "Over" ? "bg-danger" : b.Status == "Near" ? "bg-warning" : "bg-primary";
                        <tr>
                            <td>@b.CategoryName</td>
                            <td class="text-end">@(b.BudgetAmount!.Value.ToString("N0", new System.Globalization.CultureInfo("cs-CZ")))</td>
                            <td class="text-end">@b.SpentAmount.ToString("N0", new System.Globalization.CultureInfo("cs-CZ"))</td>
                            <td>
                                <div class="progress" role="progressbar" aria-label=$"Spent {b.SpentAmount} of {b.BudgetAmount} ({percent}%)">
                                    <div class="progress-bar @barClass" style="width:@percent%">
                                        <span class="ms-2">@percent%</span>
                                    </div>
                                </div>
                                <small class="text-muted">
                                    @if (b.Percent >= 100)
                                    {
                                        <text>Over by @((b.SpentAmount - (b.BudgetAmount ?? 0)).ToString("N0", new System.Globalization.CultureInfo("cs-CZ")))</text>
                                    }
                                    else
                                    {
                                        <text>Remaining @(((b.BudgetAmount ?? 0) - b.SpentAmount).ToString("N0", new System.Globalization.CultureInfo("cs-CZ")))</text>
                                    }
                                </small>
                            </td>
                            <td>
                                <span class="badge @(b.Status == "Over" ? "bg-danger" : b.Status == "Near" ? "bg-warning text-dark" : "bg-primary")">@b.Status</span>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="text-center text-muted">
                No budgets set for this month.
            </div>
        }
    </div>
    <div class="card-footer text-muted small">
        Near threshold at 80%. Over at 100%. Leftover does not carry over.
    </div>
</div>

<div class="row mt-4">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center gap-2">
                    <button class="btn btn-sm btn-link p-0 text-decoration-none text-body d-flex align-items-center" type="button" data-bs-toggle="collapse" data-bs-target="#regularExpensesCollapse" aria-expanded="true" aria-controls="regularExpensesCollapse" id="regularToggleBtn" aria-label="Toggle Regular Expenses" title="Collapse/Expand">
                        <i class="bi bi-caret-down-fill me-1" id="regularChevron"></i>
                        <span class="fw-semibold">Regular Expenses</span>
                    </button>
                    <small class="text-muted ms-1">
                        @("Total: " + Model.ViewModel.RegularExpenses.Sum(e => e.Amount).ToString("C", new System.Globalization.CultureInfo("cs-CZ")))
                    </small>
                </div>
                <div>
                    <button type="button" class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#addRegularExpenseModal" title="Add Expense" aria-label="Add Expense">
                        <i class="bi bi-plus-lg"></i>
                        <span class="d-none d-sm-inline ms-1">Add Expense <kbd>A</kbd></span>
                    </button>
                </div>
            </div>
            <div class="card-body collapse show" id="regularExpensesCollapse">
                @{
                    var selectedMonth = new DateTime(Model.ViewModel.Year, Model.ViewModel.Month, 1);
                    var lastIncluded = selectedMonth.AddMonths(2); // next 2 months window
                    var allRegular = await Model.GetAllRegularExpensesAsync();
                    var upcoming = allRegular
                        .Where(e => e.Schedules.Any())
                        .Where(e => e.Schedules.OrderByDescending(s => s.StartYear * 12 + s.StartMonth).First().Frequency != InvestmentTracker.Models.Frequency.Monthly)
                        .Select(e => new { Expense = e, Next = GetNextOccurrenceFrom(selectedMonth, e) })
                        .Where(x => x.Next.HasValue && x.Next.Value >= selectedMonth && x.Next.Value <= lastIncluded)
                        .OrderBy(x => x.Next)
                        .ToList();

                    DateTime? GetNextOccurrenceFrom(DateTime fromMonth, InvestmentTracker.Models.RegularExpense exp)
                    {
                        var latest = exp.Schedules.OrderByDescending(s => s.StartYear * 12 + s.StartMonth).First();
                        var interval = latest.Frequency switch
                        {
                            InvestmentTracker.Models.Frequency.Quarterly => 3,
                            InvestmentTracker.Models.Frequency.SemiAnnually => 6,
                            InvestmentTracker.Models.Frequency.Annually => 12,
                            _ => 1
                        };

                        if (interval == 1)
                            return null; // monthly not considered here

                        // compute next month >= fromMonth based on schedule start month cadence
                        var start = new DateTime(latest.StartYear, latest.StartMonth, 1);
                        // If fromMonth is before start, next is start
                        if (fromMonth <= start)
                            return start;

                        var monthsDiff = (fromMonth.Year - start.Year) * 12 + fromMonth.Month - start.Month;
                        var remainder = monthsDiff % interval;
                        var add = remainder == 0 ? 0 : interval - remainder;
                        return fromMonth.AddMonths(add);
                    }
                }
                @if (upcoming.Any())
                {
                    <div class="alert alert-info py-2 mb-3" role="alert">
                        <small>
                            <i class="bi bi-info-circle me-1"></i>
                            <strong>Upcoming non-monthly expenses:</strong>
                            @{
                                var preview = upcoming.Take(5).Select(x => $"{x.Expense.Name} ({x.Next:MMM yyyy})");
                                var list = string.Join(", ", preview);
                                var extra = Math.Max(0, upcoming.Count - 5);
                            }
                            @list@if (extra > 0) { <text> + @extra more</text>; }
                        </small>
                    </div>
                }
                <div id="regularExpensesContainer">
                    <div class="table-responsive">
                    <table class="table table-striped mb-0" id="regularExpensesTable">
                        <thead>
                            <tr>
                                <th data-sort="text">Name</th>
                                <th data-sort="text">Category</th>
                                <th data-sort="number">Amount</th>
                                <th data-sort="text">Schedule</th>
                                <th data-sort="text">Type</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.ViewModel.RegularExpenses.Any())
                            {
                                @foreach (var expense in Model.ViewModel.RegularExpenses)
                                {
                                    <tr class="fade-in">
                                        <td>
                                            @if (expense.IsAlternativeSchedule)
                                            {
                                                <i class="bi bi-calendar-event text-info me-1" title="@expense.FrequencyDisplay schedule - shows only in specific months" data-bs-toggle="tooltip"></i>
                                            }
                                            @expense.Name
                                        </td>
                                        <td>@(expense.Category?.Name ?? "Uncategorized")</td>
                                        <td data-sort-value="@expense.Amount">@expense.Amount.ToString("C", new System.Globalization.CultureInfo(expense.Currency.ToCultureCode()))</td>
                                        <td>
                                            <span class="badge @expense.FrequencyBadgeClass" title="@expense.FrequencyDisplay schedule">
                                                @expense.FrequencyDisplay
                                            </span>
                                            @if (expense.IsAlternativeSchedule)
                                            {
                                                <small class="text-muted d-block">Active this month</small>
                                            }
                                        </td>
                                        <td>
                                            <span class="badge bg-@(expense.ExpenseType == ExpenseType.Family ? "primary" : "secondary")">
                                                @expense.ExpenseType
                                            </span>
                                            @if (expense.FamilyMember != null)
                                            {
                                                <small class="text-muted d-block">@expense.FamilyMember.Name</small>
                                            }
                                        </td>
                                        <td>
                                            <button type="button" class="btn btn-sm btn-secondary" onclick="editRegularExpense(@expense.Id)" title="Edit" aria-label="Edit">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="6" class="text-center text-muted">No regular expenses found. <a href="#" data-bs-toggle="modal" data-bs-target="#addRegularExpenseModal">Add your first expense</a></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-6">
    <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center gap-2">
                    <button class="btn btn-sm btn-link p-0 text-decoration-none text-body d-flex align-items-center" type="button" data-bs-toggle="collapse" data-bs-target="#irregularExpensesCollapse" aria-expanded="true" aria-controls="irregularExpensesCollapse" id="irregularToggleBtn" aria-label="Toggle Irregular Expenses" title="Collapse/Expand">
                        <i class="bi bi-caret-down-fill me-1" id="irregularChevron"></i>
                        <span class="fw-semibold">Irregular Expenses</span>
                    </button>
                    <small class="text-muted ms-1">
                        @("Total: " + Model.ViewModel.IrregularExpenses.Sum(e => e.Amount).ToString("C", new System.Globalization.CultureInfo("cs-CZ")))
                    </small>
                </div>
                <div>
                    <button type="button" class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#addIrregularExpenseModal">Quick Add <kbd>Q</kbd></button>
                </div>
            </div>
            <div class="card-body collapse show" id="irregularExpensesCollapse">
                <div id="irregularExpensesContainer">
                    <div class="table-responsive">
                    <table class="table table-striped mb-0" id="irregularExpensesTable">
                        <thead>
                            <tr>
                                <th data-sort="date">Date</th>
                                <th data-sort="text">Name</th>
                                <th data-sort="text">Category</th>
                                <th data-sort="number">Amount</th>
                                <th data-sort="text">Type</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.ViewModel.IrregularExpenses.Any())
                            {
                                @foreach (var expense in Model.ViewModel.IrregularExpenses)
                                {
                                    <tr class="fade-in">
                                        <td data-sort-value="@expense.Date.ToString("yyyy-MM-dd")">@expense.Date.ToString("dd/MM/yyyy")</td>
                                        <td>@expense.Name</td>
                                        <td>@(expense.Category?.Name ?? "Uncategorized")</td>
                                        <td data-sort-value="@expense.Amount">@expense.Amount.ToString("C", new System.Globalization.CultureInfo(expense.Currency.ToCultureCode()))</td>
                                        <td>
                                            <span class="badge bg-@(expense.ExpenseType == ExpenseType.Family ? "primary" : "secondary")">
                                                @expense.ExpenseType
                                            </span>
                                            @if (expense.FamilyMember != null)
                                            {
                                                <small class="text-muted d-block">@expense.FamilyMember.Name</small>
                                            }
                                        </td>
                                        <td>
                                            <div class="d-flex flex-wrap align-items-center gap-2">
                                                <button type="button" class="btn btn-sm btn-secondary" onclick="editIrregularExpense(@expense.Id)" title="Edit" aria-label="Edit">
                                                    <i class="bi bi-pencil"></i>
                                                </button>
                                                <form method="post" asp-page-handler="DeleteIrregularExpense" asp-route-expenseId="@expense.Id" class="d-inline" data-confirm="Delete this irregular expense? This action cannot be undone." data-loading="Deleting expense...">
                                                    <button type="submit" class="btn btn-sm btn-danger align-middle" title="Delete" aria-label="Delete">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </form>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="6" class="text-center text-muted">No irregular expenses found. <a href="#" data-bs-toggle="modal" data-bs-target="#addIrregularExpenseModal">Add your first expense</a></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Regular Expense Modal -->
<div class="modal fade" id="addRegularExpenseModal" tabindex="-1" aria-labelledby="addRegularExpenseModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addRegularExpenseModalLabel">Add Regular Expense</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post" asp-page-handler="AddRegularExpense" data-loading="Adding expense...">
                    <div class="mb-3">
                        <label for="regularExpenseName" class="form-label">Name</label>
                        <input type="text" id="regularExpenseName" name="name" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="regularExpenseAmount" class="form-label">Amount</label>
                        <input type="number" id="regularExpenseAmount" name="amount" step="0.01" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="regularExpenseCategory" class="form-label">Category</label>
                        <select id="regularExpenseCategory" name="categoryId" class="form-control" required>
                            <option value="">Select Category</option>
                            @foreach (var category in await Model.GetExpenseCategoriesAsync())
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="regularExpenseType" class="form-label">Expense Type</label>
                        <select id="regularExpenseType" name="expenseType" class="form-control" required onchange="toggleFamilyMemberSelection('regularExpense')">
                            <option value="Family" selected>Family</option>
                            <option value="Individual">Individual</option>
                        </select>
                    </div>
                    <div class="mb-3" id="regularExpenseFamilyMemberContainer" style="display: none;">
                        <label for="regularExpenseFamilyMember" class="form-label">Family Member</label>
                        <select id="regularExpenseFamilyMember" name="familyMemberId" class="form-control">
                            <option value="">Select Family Member</option>
                            @foreach (var member in await Model.GetFamilyMembersAsync())
                            {
                                <option value="@member.Id">@member.Name (@member.Relationship)</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="regularExpenseCurrency" class="form-label">Currency</label>
                        <select id="regularExpenseCurrency" name="currency" class="form-control" required>
                            <option value="CZK" selected>CZK</option>
                            <option value="EUR">EUR</option>
                            <option value="USD">USD</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="regularExpenseFrequency" class="form-label">Frequency</label>
                        <select id="regularExpenseFrequency" name="frequency" class="form-control" required>
                            <option value="Monthly">Monthly</option>
                            <option value="Quarterly">Quarterly</option>
                            <option value="SemiAnnually">Semi-Annually</option>
                            <option value="Annually">Annually</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="regularExpenseStartDate" class="form-label">Start Year and Month</label>
                        <div class="row g-2">
                            <div class="col-6">
                                <select id="regularExpenseStartYear" name="startYear" class="form-control" required>
                                    <option value="">Year</option>
                                    @for (int y = DateTime.Today.Year - 1; y <= DateTime.Today.Year + 5; y++)
                                    {
                                        <option value="@y" selected="@(y == DateTime.Today.Year)">@y</option>
                                    }
                                </select>
                            </div>
                            <div class="col-6">
                                <select id="regularExpenseStartMonth" name="startMonth" class="form-control" required>
                                    <option value="">Month</option>
                                    @for (int m = 1; m <= 12; m++)
                                    {
                                        <option value="@m" selected="@(m == DateTime.Today.Month)">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(m)</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                    <button type="submit" class="btn btn-primary" title="Add Expense" aria-label="Add Expense">
                        <i class="bi bi-plus-lg"></i>
                        <span class="d-none d-sm-inline ms-1">Add Expense</span>
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Add Irregular Expense Modal -->
<div class="modal fade" id="addIrregularExpenseModal" tabindex="-1" aria-labelledby="addIrregularExpenseModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addIrregularExpenseModalLabel">Quick Add Irregular Expense</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post" asp-page-handler="AddIrregularExpense" data-loading="Adding expense...">
                    <div class="mb-3">
                        <label for="irregularExpenseName" class="form-label">Name</label>
                        <input type="text" id="irregularExpenseName" name="name" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="irregularExpenseAmount" class="form-label">Amount</label>
                        <input type="number" id="irregularExpenseAmount" name="amount" step="0.01" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="irregularExpenseCategory" class="form-label">Category</label>
                        <select id="irregularExpenseCategory" name="categoryId" class="form-control" required>
                            <option value="">Select Category</option>
                            @foreach (var category in await Model.GetExpenseCategoriesAsync())
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="irregularExpenseType" class="form-label">Expense Type</label>
                        <select id="irregularExpenseType" name="expenseType" class="form-control" required onchange="toggleFamilyMemberSelection('irregularExpense')">
                            <option value="Family" selected>Family</option>
                            <option value="Individual">Individual</option>
                        </select>
                    </div>
                    <div class="mb-3" id="irregularExpenseFamilyMemberContainer" style="display: none;">
                        <label for="irregularExpenseFamilyMember" class="form-label">Family Member</label>
                        <select id="irregularExpenseFamilyMember" name="familyMemberId" class="form-control">
                            <option value="">Select Family Member</option>
                            @foreach (var member in await Model.GetFamilyMembersAsync())
                            {
                                <option value="@member.Id">@member.Name (@member.Relationship)</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="irregularExpenseCurrency" class="form-label">Currency</label>
                        <select id="irregularExpenseCurrency" name="currency" class="form-control" required>
                            <option value="CZK" selected>CZK</option>
                            <option value="EUR">EUR</option>
                            <option value="USD">USD</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="irregularExpenseDate" class="form-label">Date</label>
                        <input type="date" id="irregularExpenseDate" name="date" class="form-control" required value="@DateTime.Today.ToString("yyyy-MM-dd")" />
                    </div>
                    <button type="submit" class="btn btn-primary" title="Add Expense" aria-label="Add Expense">
                        <i class="bi bi-plus-lg"></i>
                        <span class="d-none d-sm-inline ms-1">Add Expense</span>
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Edit Regular Expense Modal -->
<div class="modal fade" id="editRegularExpenseModal" tabindex="-1" aria-labelledby="editRegularExpenseModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editRegularExpenseModalLabel">Edit Regular Expense</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post" asp-page-handler="UpdateRegularExpense" data-loading="Updating expense...">
                    <input type="hidden" id="editExpenseId" name="id" />
                    <div class="mb-3">
                        <label for="editRegularExpenseName" class="form-label">Name</label>
                        <input type="text" id="editRegularExpenseName" name="name" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="editRegularExpenseAmount" class="form-label">Amount</label>
                        <input type="number" id="editRegularExpenseAmount" name="amount" step="0.01" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="editRegularExpenseCategory" class="form-label">Category</label>
                        <select id="editRegularExpenseCategory" name="categoryId" class="form-control" required>
                            <option value="">Select Category</option>
                            @foreach (var category in await Model.GetExpenseCategoriesAsync())
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="editRegularExpenseType" class="form-label">Expense Type</label>
                        <select id="editRegularExpenseType" name="expenseType" class="form-control" required onchange="toggleFamilyMemberSelection('editRegularExpense')">
                            <option value="Family">Family</option>
                            <option value="Individual">Individual</option>
                        </select>
                    </div>
                    <div class="mb-3" id="editRegularExpenseFamilyMemberContainer" style="display: none;">
                        <label for="editRegularExpenseFamilyMember" class="form-label">Family Member</label>
                        <select id="editRegularExpenseFamilyMember" name="familyMemberId" class="form-control">
                            <option value="">Select Family Member</option>
                            @foreach (var member in await Model.GetFamilyMembersAsync())
                            {
                                <option value="@member.Id">@member.Name (@member.Relationship)</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="editRegularExpenseCurrency" class="form-label">Currency</label>
                        <select id="editRegularExpenseCurrency" name="currency" class="form-control" required>
                            <option value="CZK">CZK</option>
                            <option value="EUR">EUR</option>
                            <option value="USD">USD</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="editRegularExpenseFrequency" class="form-label">Frequency</label>
                        <select id="editRegularExpenseFrequency" name="frequency" class="form-control" required>
                            <option value="Monthly">Monthly</option>
                            <option value="Quarterly">Quarterly</option>
                            <option value="SemiAnnually">Semi-Annually</option>
                            <option value="Annually">Annually</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="editRegularExpenseStartDate" class="form-label">Start Year and Month</label>
                        <div class="row g-2">
                            <div class="col-6">
                                <select id="editRegularExpenseStartYear" name="startYear" class="form-control" required>
                                    <option value="">Year</option>
                                    @for (int y = DateTime.Today.Year - 1; y <= DateTime.Today.Year + 5; y++)
                                    {
                                        <option value="@y">@y</option>
                                    }
                                </select>
                            </div>
                            <div class="col-6">
                                <select id="editRegularExpenseStartMonth" name="startMonth" class="form-control" required>
                                    <option value="">Month</option>
                                    @for (int m = 1; m <= 12; m++)
                                    {
                                        <option value="@m">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(m)</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>

                    <!-- Schedule History Section -->
                    <div class="mb-3">
                        <label class="form-label">Schedule History</label>
                        <div class="table-responsive">
                            <table class="table table-striped table-sm table-bordered" id="editExpenseSchedulesTable">
                                <thead class="table-light">
                                    <tr>
                                        <th>Start Year/Month</th>
                                        <th>End Year/Month</th>
                                        <th>Amount</th>
                                        <th>Status</th>
                                    </tr>
                                </thead>
                                <tbody id="editExpenseSchedulesBody">
                                    <!-- Schedule rows will be populated by JavaScript -->
                                </tbody>
                            </table>
                        </div>
                        <div class="form-text">
                            <small class="text-muted">This table shows all historical and future schedules for this expense.</small>
                        </div>
                    </div>

                    <div class="alert alert-info">
                        <small><strong>Note:</strong> Changes will only apply from the selected month forward. Historical data will remain unchanged.</small>
                    </div>
                    <button type="submit" class="btn btn-primary" title="Update Expense" aria-label="Update Expense">
                        <i class="bi bi-save"></i>
                        <span class="d-none d-sm-inline ms-1">Update Expense</span>
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Edit Irregular Expense Modal -->
<div class="modal fade" id="editIrregularExpenseModal" tabindex="-1" aria-labelledby="editIrregularExpenseModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editIrregularExpenseModalLabel">Edit Irregular Expense</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post" asp-page-handler="UpdateIrregularExpense" data-loading="Updating expense...">
                    <input type="hidden" id="editIrregularExpenseId" name="id" />
                    <div class="mb-3">
                        <label for="editIrregularExpenseName" class="form-label">Name</label>
                        <input type="text" id="editIrregularExpenseName" name="name" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="editIrregularExpenseAmount" class="form-label">Amount</label>
                        <input type="number" id="editIrregularExpenseAmount" name="amount" step="0.01" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="editIrregularExpenseCategory" class="form-label">Category</label>
                        <select id="editIrregularExpenseCategory" name="categoryId" class="form-control" required>
                            <option value="">Select Category</option>
                            @foreach (var category in await Model.GetExpenseCategoriesAsync())
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="editIrregularExpenseType" class="form-label">Expense Type</label>
                        <select id="editIrregularExpenseType" name="expenseType" class="form-control" required onchange="toggleFamilyMemberSelection('editIrregularExpense')">
                            <option value="Family">Family</option>
                            <option value="Individual">Individual</option>
                        </select>
                    </div>
                    <div class="mb-3" id="editIrregularExpenseFamilyMemberContainer" style="display: none;">
                        <label for="editIrregularExpenseFamilyMember" class="form-label">Family Member</label>
                        <select id="editIrregularExpenseFamilyMember" name="familyMemberId" class="form-control">
                            <option value="">Select Family Member</option>
                            @foreach (var member in await Model.GetFamilyMembersAsync())
                            {
                                <option value="@member.Id">@member.Name (@member.Relationship)</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="editIrregularExpenseCurrency" class="form-label">Currency</label>
                        <select id="editIrregularExpenseCurrency" name="currency" class="form-control" required>
                            <option value="CZK">CZK</option>
                            <option value="EUR">EUR</option>
                            <option value="USD">USD</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="editIrregularExpenseDate" class="form-label">Date</label>
                        <input type="date" id="editIrregularExpenseDate" name="date" class="form-control" required />
                    </div>
                    <button type="submit" class="btn btn-primary" title="Update Expense" aria-label="Update Expense">
                        <i class="bi bi-save"></i>
                        <span class="d-none d-sm-inline ms-1">Update Expense</span>
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Add One-Time Income Modal -->
<div class="modal fade" id="addOneTimeIncomeModal" tabindex="-1" aria-labelledby="addOneTimeIncomeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addOneTimeIncomeModalLabel">Add One-Time Income</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post" asp-page-handler="AddOneTimeIncome" data-loading="Adding income...">
                    <div class="mb-3">
                        <label for="oneTimeIncomeName" class="form-label">Name</label>
                        <input type="text" id="oneTimeIncomeName" name="name" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="oneTimeIncomeAmount" class="form-label">Amount</label>
                        <input type="number" id="oneTimeIncomeAmount" name="amount" step="0.01" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="oneTimeIncomeSource" class="form-label">Income Source (Optional)</label>
                        <select id="oneTimeIncomeSource" name="incomeSourceId" class="form-control">
                            <option value="">Select Source (Optional)</option>
                            @foreach (var source in await Model.GetIncomeSourcesAsync())
                            {
                                <option value="@source.Id">@source.Name</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="oneTimeIncomeCurrency" class="form-label">Currency</label>
                        <select id="oneTimeIncomeCurrency" name="currency" class="form-control" required>
                            <option value="CZK" selected>CZK</option>
                            <option value="EUR">EUR</option>
                            <option value="USD">USD</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="oneTimeIncomeDate" class="form-label">Date</label>
                        <input type="date" id="oneTimeIncomeDate" name="date" class="form-control" required value="@DateTime.Today.ToString("yyyy-MM-dd")" />
                    </div>
                    <button type="submit" class="btn btn-primary" title="Add Income" aria-label="Add Income">
                        <i class="bi bi-plus-lg"></i>
                        <span class="d-none d-sm-inline ms-1">Add Income</span>
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Edit One-Time Income Modal -->
<div class="modal fade" id="editOneTimeIncomeModal" tabindex="-1" aria-labelledby="editOneTimeIncomeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editOneTimeIncomeModalLabel">Edit One-Time Income</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post" asp-page-handler="UpdateOneTimeIncome" data-loading="Updating income...">
                    <input type="hidden" id="editOneTimeIncomeId" name="id" />
                    <div class="mb-3">
                        <label for="editOneTimeIncomeName" class="form-label">Name</label>
                        <input type="text" id="editOneTimeIncomeName" name="name" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="editOneTimeIncomeAmount" class="form-label">Amount</label>
                        <input type="number" id="editOneTimeIncomeAmount" name="amount" step="0.01" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="editOneTimeIncomeSource" class="form-label">Income Source (Optional)</label>
                        <select id="editOneTimeIncomeSource" name="incomeSourceId" class="form-control">
                            <option value="">Select Source (Optional)</option>
                            @foreach (var source in await Model.GetIncomeSourcesAsync())
                            {
                                <option value="@source.Id">@source.Name</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="editOneTimeIncomeCurrency" class="form-label">Currency</label>
                        <select id="editOneTimeIncomeCurrency" name="currency" class="form-control" required>
                            <option value="CZK">CZK</option>
                            <option value="EUR">EUR</option>
                            <option value="USD">USD</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="editOneTimeIncomeDate" class="form-label">Date</label>
                        <input type="date" id="editOneTimeIncomeDate" name="date" class="form-control" required />
                    </div>
                    <button type="submit" class="btn btn-primary" title="Update Income" aria-label="Update Income">
                        <i class="bi bi-save"></i>
                        <span class="d-none d-sm-inline ms-1">Update Income</span>
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Toggle icons for collapsible sections
        document.addEventListener('DOMContentLoaded', function () {
            const pairs = [
                { collapseId: 'regularExpensesCollapse', chevronId: 'regularChevron' },
                { collapseId: 'irregularExpensesCollapse', chevronId: 'irregularChevron' },
                { collapseId: 'regularIncomesCollapse', chevronId: 'regularIncomesChevron' },
                { collapseId: 'oneTimeIncomesCollapse', chevronId: 'oneTimeIncomesChevron' },
                { collapseId: 'budgetsCollapse', chevronId: 'budgetsChevron' }
            ];
            pairs.forEach(({ collapseId, chevronId }) => {
                const collapseEl = document.getElementById(collapseId);
                const chevron = document.getElementById(chevronId);
                if (!collapseEl || !chevron) return;
                collapseEl.addEventListener('hide.bs.collapse', () => {
                    chevron.classList.remove('bi-caret-down-fill');
                    chevron.classList.add('bi-caret-right-fill');
                });
                collapseEl.addEventListener('show.bs.collapse', () => {
                    chevron.classList.remove('bi-caret-right-fill');
                    chevron.classList.add('bi-caret-down-fill');
                });
            });
        });
    </script>
    <script>
        // Create expense data objects
        const regularExpensesData = [
            @foreach (var expense in Model.ViewModel.RegularExpenses)
            {
                <text>
            {
                id: @expense.Id,
                name: '@Html.Raw(expense.Name.Replace("'", "\\'"))',
                amount: @expense.Amount,
                categoryId: @(expense.Category != null ? expense.Category.Id.ToString() : "null"),
                currency: '@expense.Currency',
                recurrence: '@expense.Recurrence',
                startDate: '@expense.StartDate.ToString("yyyy-MM-dd")',
                expenseType: '@expense.ExpenseType',
                familyMemberId: @(expense.FamilyMemberId?.ToString() ?? "null")
            },
                </text>
            }
        ];

        // Store full expense data for editing (including all schedules)
        const fullRegularExpensesData = [
            @foreach (var expense in await Model.GetAllRegularExpensesAsync())
            {
                <text>
            {
                id: @expense.Id,
                name: '@Html.Raw(expense.Name.Replace("'", "\\'"))',
                amount: @expense.Amount,
                categoryId: @(expense.Category != null ? expense.Category.Id.ToString() : "null"),
                currency: '@expense.Currency',
                recurrence: '@expense.Recurrence',
                startDate: '@expense.StartDate.ToString("yyyy-MM-dd")',
                expenseType: '@expense.ExpenseType',
                familyMemberId: @(expense.FamilyMemberId?.ToString() ?? "null"),
                schedules: [
                    @foreach (var schedule in expense.Schedules.OrderBy(s => s.StartYear * 12 + s.StartMonth))
                    {
                        <text>
                    {
                        startYear: @schedule.StartYear,
                        startMonth: @schedule.StartMonth,
                        endYear: @(schedule.EndYear?.ToString() ?? "null"),
                        endMonth: @(schedule.EndMonth?.ToString() ?? "null"),
                        amount: @schedule.Amount,
                        frequency: '@schedule.Frequency'
                    },
                        </text>
                    }
                ]
            },
                </text>
            }
        ];

        // One-time incomes data
        const oneTimeIncomesData = [
            @foreach (var income in Model.ViewModel.OneTimeIncomes)
            {
                <text>
            {
                id: @income.Id,
                name: '@Html.Raw(income.Name.Replace("'", "\\'"))',
                amount: @income.Amount,
                incomeSourceId: @(income.IncomeSourceId?.ToString() ?? "null"),
                currency: '@income.Currency',
                date: '@income.Date.ToString("yyyy-MM-dd")'
            },
                </text>
            }
        ];

        // Irregular expenses data
        const irregularExpensesData = [
            @foreach (var expense in Model.ViewModel.IrregularExpenses)
            {
                <text>
            {
                id: @expense.Id,
                name: '@Html.Raw(expense.Name.Replace("'", "\\'"))',
                amount: @expense.Amount,
                categoryId: @(expense.Category != null ? expense.Category.Id.ToString() : "null"),
                currency: '@expense.Currency',
                date: '@expense.Date.ToString("yyyy-MM-dd")',
                expenseType: '@expense.ExpenseType',
                familyMemberId: @(expense.FamilyMemberId?.ToString() ?? "null")
            },
                </text>
            }
        ];

        // Define functions globally
        window.editRegularExpense = function(expenseId) {
            console.log('editRegularExpense called with ID:', expenseId);

            // Find the expense data (use full data for complete schedule information)
            const expense = fullRegularExpensesData.find(e => e.id == expenseId);
            if (expense) {
                console.log('Found expense:', expense.name);
                document.getElementById('editExpenseId').value = expense.id;
                document.getElementById('editRegularExpenseName').value = expense.name;
                document.getElementById('editRegularExpenseAmount').value = expense.amount;
                document.getElementById('editRegularExpenseCategory').value = expense.categoryId || '';
                document.getElementById('editRegularExpenseCurrency').value = expense.currency;
                document.getElementById('editRegularExpenseFrequency').value = expense.recurrence;
                
                // Set expense type and family member
                document.getElementById('editRegularExpenseType').value = expense.expenseType || 'Family';
                document.getElementById('editRegularExpenseFamilyMember').value = expense.familyMemberId || '';
                
                // Toggle family member selection based on expense type
                toggleFamilyMemberSelection('editRegularExpense');
                
                // Set year and month from the start date
                const startDate = new Date(expense.startDate);
                document.getElementById('editRegularExpenseStartYear').value = startDate.getFullYear();
                document.getElementById('editRegularExpenseStartMonth').value = startDate.getMonth() + 1; // JavaScript months are 0-based

                // Populate schedule history table
                const schedulesBody = document.getElementById('editExpenseSchedulesBody');
                schedulesBody.innerHTML = '';

                const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD format

                expense.schedules.forEach(schedule => {
                    const row = document.createElement('tr');

                    // Start Date - display as Month Year
                    const startCell = document.createElement('td');
                    const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
                    startCell.textContent = `${monthNames[schedule.startMonth - 1]} ${schedule.startYear}`;
                    row.appendChild(startCell);

                    // End Date
                    const endCell = document.createElement('td');
                    if (schedule.endYear && schedule.endMonth) {
                        endCell.textContent = `${monthNames[schedule.endMonth - 1]} ${schedule.endYear}`;
                    } else {
                        endCell.textContent = 'Ongoing';
                    }
                    row.appendChild(endCell);

                    // Amount
                    const amountCell = document.createElement('td');
                    amountCell.textContent = schedule.amount.toLocaleString('cs-CZ', { style: 'currency', currency: expense.currency });
                    row.appendChild(amountCell);

                    // Status
                    const statusCell = document.createElement('td');
                    const currentYear = new Date().getFullYear();
                    const currentMonth = new Date().getMonth() + 1; // JavaScript months are 0-based
                    
                    const scheduleStart = schedule.startYear * 12 + schedule.startMonth;
                    const scheduleEnd = (schedule.endYear && schedule.endMonth) 
                        ? schedule.endYear * 12 + schedule.endMonth 
                        : Number.MAX_SAFE_INTEGER;
                    const current = currentYear * 12 + currentMonth;
                    
                    const isCurrent = scheduleStart <= current && scheduleEnd >= current;
                    const isFuture = scheduleStart > current;
                    const isPast = scheduleEnd < current;

                    let statusBadge = '';
                    if (isCurrent) {
                        statusBadge = '<span class="badge bg-success">Current</span>';
                    } else if (isFuture) {
                        statusBadge = '<span class="badge bg-primary">Future</span>';
                    } else if (isPast) {
                        statusBadge = '<span class="badge bg-secondary">Past</span>';
                    }

                    statusCell.innerHTML = statusBadge;
                    row.appendChild(statusCell);

                    schedulesBody.appendChild(row);
                });
            }

            // Show the modal
            const modalElement = document.getElementById('editRegularExpenseModal');
            console.log('Modal element:', modalElement);
            if (modalElement) {
                const modal = new bootstrap.Modal(modalElement);
                modal.show();
                console.log('Modal shown successfully');
            } else {
                console.error('Modal element not found!');
            }
        };

        window.editIrregularExpense = function(expenseId) {
            console.log('editIrregularExpense called with ID:', expenseId);

            // Find the expense data
            const expense = irregularExpensesData.find(e => e.id == expenseId);
            if (expense) {
                console.log('Found expense:', expense.name);
                document.getElementById('editIrregularExpenseId').value = expense.id;
                document.getElementById('editIrregularExpenseName').value = expense.name;
                document.getElementById('editIrregularExpenseAmount').value = expense.amount;
                document.getElementById('editIrregularExpenseCategory').value = expense.categoryId || '';
                document.getElementById('editIrregularExpenseCurrency').value = expense.currency;
                document.getElementById('editIrregularExpenseDate').value = expense.date;
                
                // Set expense type and family member
                document.getElementById('editIrregularExpenseType').value = expense.expenseType || 'Family';
                document.getElementById('editIrregularExpenseFamilyMember').value = expense.familyMemberId || '';
                
                // Toggle family member selection based on expense type
                toggleFamilyMemberSelection('editIrregularExpense');
            }

            // Show the modal
            const modalElement = document.getElementById('editIrregularExpenseModal');
            console.log('Modal element:', modalElement);
            if (modalElement) {
                const modal = new bootstrap.Modal(modalElement);
                modal.show();
                console.log('Modal shown successfully');
            } else {
                console.error('Modal element not found!');
            }
        };

        // Month navigation function
        window.navigateMonth = function(direction) {
            const currentYear = @Model.ViewModel.Year;
            const currentMonth = @Model.ViewModel.Month;
            
            let newYear = currentYear;
            let newMonth = currentMonth + direction;
            
            // Handle year transitions
            if (newMonth < 1) {
                newMonth = 12;
                newYear = currentYear - 1;
            } else if (newMonth > 12) {
                newMonth = 1;
                newYear = currentYear + 1;
            }
            
            // Navigate to the new month
            const url = `?year=${newYear}&month=${newMonth}`;
            window.location.href = url;
        };

        window.navigateToCurrentMonth = function() {
            const currentDate = new Date();
            const currentYear = currentDate.getFullYear();
            const currentMonth = currentDate.getMonth() + 1; // JavaScript months are 0-based
            
            // Navigate to current month
            const url = `?year=${currentYear}&month=${currentMonth}`;
            window.location.href = url;
        };

        // Keyboard shortcuts for month navigation
        document.addEventListener('DOMContentLoaded', function() {
            document.addEventListener('keydown', function(event) {
                // Don't trigger shortcuts when user is typing in input fields
                if (event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA' || event.target.tagName === 'SELECT') {
                    return;
                }

                // Don't trigger shortcuts when modal is open
                if (document.querySelector('.modal.show')) {
                    return;
                }

                // Don't trigger shortcuts when modifier keys are pressed (Cmd, Ctrl, Alt, Shift)
                if (event.metaKey || event.ctrlKey || event.altKey || event.shiftKey) {
                    return;
                }

                switch(event.key) {
                    case 'ArrowLeft':
                    case 'p':
                    case 'P':
                        event.preventDefault();
                        navigateMonth(-1);
                        break;
                    case 'ArrowRight':
                    case 'n':
                    case 'N':
                        event.preventDefault();
                        navigateMonth(1);
                        break;
                    case 'c':
                    case 'C':
                    case 't':
                    case 'T':
                    case 'Home':
                        event.preventDefault();
                        navigateToCurrentMonth();
                        break;
                    case 'h':
                    case 'H':
                        event.preventDefault();
                        navigateToCurrentMonth();
                        break;
                }
            });
        });

        // One-time income functions
        window.editOneTimeIncome = function(incomeId) {
            console.log('editOneTimeIncome called with ID:', incomeId);

            // Find the income data
            const income = oneTimeIncomesData.find(i => i.id == incomeId);
            if (income) {
                console.log('Found income:', income.name);
                document.getElementById('editOneTimeIncomeId').value = income.id;
                document.getElementById('editOneTimeIncomeName').value = income.name;
                document.getElementById('editOneTimeIncomeAmount').value = income.amount;
                document.getElementById('editOneTimeIncomeSource').value = income.incomeSourceId || '';
                document.getElementById('editOneTimeIncomeCurrency').value = income.currency;
                document.getElementById('editOneTimeIncomeDate').value = income.date;
            }

            // Show the modal
            const modalElement = document.getElementById('editOneTimeIncomeModal');
            if (modalElement) {
                const modal = new bootstrap.Modal(modalElement);
                modal.show();
            }
        };

        window.deleteOneTimeIncome = function(incomeId) {
            if (confirm('Are you sure you want to delete this one-time income? This action cannot be undone.')) {
                // Use the hidden form
                const form = document.getElementById('deleteOneTimeIncomeForm');
                const incomeIdInput = document.getElementById('deleteOneTimeIncomeId');
                incomeIdInput.value = incomeId;
                form.submit();
            }
        };

        // Toggle family member selection visibility based on expense type
        window.toggleFamilyMemberSelection = function(prefix) {
            const expenseTypeSelect = document.getElementById(prefix + 'Type');
            const familyMemberContainer = document.getElementById(prefix + 'FamilyMemberContainer');
            const familyMemberSelect = document.getElementById(prefix + 'FamilyMember');
            
            if (expenseTypeSelect.value === 'Individual') {
                familyMemberContainer.style.display = 'block';
                familyMemberSelect.required = true;
            } else {
                familyMemberContainer.style.display = 'none';
                familyMemberSelect.required = false;
                familyMemberSelect.value = '';
            }
        };

        // Initialize tooltips
        document.addEventListener('DOMContentLoaded', function() {
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            const tooltipList = tooltipTriggerList.map(function(tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        });
    </script>
    <script>
        (function () {
            function parseValue(type, value) {
                if (value == null) return '';
                if (type === 'number') {
                    const n = parseFloat(value);
                    return isNaN(n) ? 0 : n;
                }
                if (type === 'date') {
                    // Expect yyyy-MM-dd
                    const t = Date.parse(value);
                    return isNaN(t) ? 0 : t;
                }
                return ('' + value).toLowerCase();
            }

            function getCellValue(td, type) {
                const raw = td ? (td.getAttribute('data-sort-value') ?? td.textContent.trim()) : '';
                return parseValue(type, raw);
            }

            function clearOtherHeaders(ths, current) {
                ths.forEach(th => {
                    if (th !== current) {
                        th.removeAttribute('aria-sort');
                        const ind = th.querySelector('.sort-indicator');
                        if (ind) ind.remove();
                        th.dataset.order = '';
                    }
                });
            }

            function setIndicator(th, order) {
                let ind = th.querySelector('.sort-indicator');
                if (!ind) {
                    ind = document.createElement('span');
                    ind.className = 'sort-indicator ms-1';
                    th.appendChild(ind);
                }
                ind.innerHTML = order === 'asc' ? '<i class="bi bi-chevron-up"></i>' : '<i class="bi bi-chevron-down"></i>';
            }

            function makeTableSortable(tableId) {
                const table = document.getElementById(tableId);
                if (!table || !table.tHead) return;
                const ths = Array.from(table.tHead.querySelectorAll('th'));
                ths.forEach((th, idx) => {
                    const type = th.dataset.sort;
                    if (!type) return;
                    th.setAttribute('role', 'button');
                    th.tabIndex = 0;
                    th.title = 'Sort';
                    th.addEventListener('click', () => {
                        const tbody = table.tBodies[0];
                        if (!tbody) return;
                        const rows = Array.from(tbody.rows);
                        const currentOrder = th.dataset.order === 'asc' ? 'asc' : th.dataset.order === 'desc' ? 'desc' : '';
                        const newOrder = currentOrder === 'asc' ? 'desc' : 'asc';

                        clearOtherHeaders(ths, th);
                        th.dataset.order = newOrder;
                        th.setAttribute('aria-sort', newOrder === 'asc' ? 'ascending' : 'descending');
                        setIndicator(th, newOrder);

                        rows.sort((a, b) => {
                            const av = getCellValue(a.cells[idx], type);
                            const bv = getCellValue(b.cells[idx], type);
                            if (av < bv) return newOrder === 'asc' ? -1 : 1;
                            if (av > bv) return newOrder === 'asc' ? 1 : -1;
                            return 0;
                        });

                        // Re-append rows in new order
                        const frag = document.createDocumentFragment();
                        rows.forEach(r => frag.appendChild(r));
                        tbody.appendChild(frag);
                    });
                    th.addEventListener('keydown', (e) => {
                        if (e.key === 'Enter' || e.key === ' ') {
                            e.preventDefault();
                            th.click();
                        }
                    });
                });
            }

            document.addEventListener('DOMContentLoaded', function () {
                makeTableSortable('regularExpensesTable');
                makeTableSortable('irregularExpensesTable');
            });
        })();
    </script>
}
