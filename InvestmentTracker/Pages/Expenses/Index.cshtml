@page
@model InvestmentTracker.Pages.Expenses.IndexModel
@using System.Text.Json
@using InvestmentTracker.Models
@{
    var currentDate = new DateTime(Model.ViewModel.Year, Model.ViewModel.Month, 1);
    ViewData["Title"] = $"Monthly Expenses - {currentDate.ToString("MMMM yyyy")}";
}

<h2>Monthly Expenses - @currentDate.ToString("MMMM yyyy")</h2>

<form method="get" class="mb-4">
    <div class="row g-3 align-items-end">
        <div class="col-auto">
            <label for="year" class="form-label">Year</label>
            <select name="year" id="year" class="form-select">
                @for (int y = DateTime.Today.Year - 5; y <= DateTime.Today.Year + 1; y++)
                {
                    <option value="@y" selected="@(Model.ViewModel.Year == y)">@y</option>
                }
            </select>
        </div>
        <div class="col-auto">
            <label for="month" class="form-label">Month</label>
            <select name="month" id="month" class="form-select">
                @for (int m = 1; m <= 12; m++)
                {
                    <option value="@m" selected="@(Model.ViewModel.Month == m)">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(m)</option>
                }
            </select>
        </div>
        <div class="col-auto">
            <button type="submit" class="btn btn-primary">View</button>
        </div>
    </div>
</form>

<div class="row mb-4">
    <div class="col-md-4">
        <div class="card text-white bg-success">
            <div class="card-body">
                <h5 class="card-title">Total Income</h5>
                <p class="card-text fs-4">@Model.ViewModel.TotalIncome.ToString("C", new System.Globalization.CultureInfo("cs-CZ"))</p>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card text-white bg-danger">
            <div class="card-body">
                <h5 class="card-title">Total Expenses</h5>
                <p class="card-text fs-4">@Model.ViewModel.TotalExpenses.ToString("C", new System.Globalization.CultureInfo("cs-CZ"))</p>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card text-white @(Model.ViewModel.NetBalance >= 0 ? "bg-primary" : "bg-warning")">
            <div class="card-body">
                <h5 class="card-title">Net Balance</h5>
                <p class="card-text fs-4">@Model.ViewModel.NetBalance.ToString("C", new System.Globalization.CultureInfo("cs-CZ"))</p>
            </div>
        </div>
    </div>
</div>

<div class="row mt-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                Incomes
                <a asp-page="./IncomeSources" class="btn btn-sm btn-outline-primary">Manage Sources</a>
            </div>
            <div class="card-body">
                <table class="table mb-0">
                    <thead>
                        <tr>
                            <th>Source</th>
                            <th>Expected</th>
                            <th>Actual</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var income in Model.ViewModel.Incomes)
                        {
                            <tr>
                                <form method="post" asp-page-handler="UpdateIncome">
                                    <td>@income.Name</td>
                                    <td>@income.ExpectedAmount.ToString("C", new System.Globalization.CultureInfo(income.Currency.ToCultureCode()))</td>
                                    <td>
                                        <input type="text" name="actualAmount" value="@income.ActualAmount" class="form-control" />
                                        <input type="hidden" name="incomeSourceId" value="@income.IncomeSourceId" />
                                        <input type="hidden" name="year" value="@Model.ViewModel.Year" />
                                        <input type="hidden" name="month" value="@Model.ViewModel.Month" />
                                    </td>
                                    <td>
                                        <button type="submit" class="btn btn-sm btn-primary">Update</button>
                                    </td>
                                </form>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<div class="row mt-4">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                Regular Expenses
                <div>
                    <a asp-page="./ExpenseCategories" class="btn btn-sm btn-outline-secondary me-2">Manage Categories</a>
                    <button type="button" class="btn btn-sm btn-outline-primary" data-bs-toggle="modal" data-bs-target="#addRegularExpenseModal">Add Expense</button>
                </div>
            </div>
            <div class="card-body">
                <table class="table mb-0">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Category</th>
                            <th>Amount</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.ViewModel.RegularExpenses.Any())
                        {
                            @foreach (var expense in Model.ViewModel.RegularExpenses)
                            {
                                <tr>
                                    <td>@expense.Name</td>
                                    <td>@(expense.Category?.Name ?? "Uncategorized")</td>
                                    <td>@expense.Amount.ToString("C", new System.Globalization.CultureInfo(expense.Currency.ToCultureCode()))</td>
                                    <td>
                                        <button type="button" class="btn btn-sm btn-secondary" onclick="editRegularExpense(@expense.Id)">Edit</button>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="4" class="text-center text-muted">No regular expenses found. <a href="#" data-bs-toggle="modal" data-bs-target="#addRegularExpenseModal">Add your first expense</a></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                Irregular Expenses
                <div>
                    <a asp-page="./ExpenseCategories" class="btn btn-sm btn-outline-secondary me-2">Manage Categories</a>
                    <button type="button" class="btn btn-sm btn-outline-primary" data-bs-toggle="modal" data-bs-target="#addIrregularExpenseModal">Quick Add</button>
                </div>
            </div>
            <div class="card-body">
                <table class="table mb-0">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Name</th>
                            <th>Category</th>
                            <th>Amount</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (Model.ViewModel.IrregularExpenses.Any())
                        {
                            @foreach (var expense in Model.ViewModel.IrregularExpenses)
                            {
                                <tr>
                                    <td>@expense.Date.ToString("dd/MM/yyyy")</td>
                                    <td>@expense.Name</td>
                                    <td>@(expense.Category?.Name ?? "Uncategorized")</td>
                                    <td>@expense.Amount.ToString("C", new System.Globalization.CultureInfo(expense.Currency.ToCultureCode()))</td>
                                    <td>
                                        <button type="button" class="btn btn-sm btn-secondary me-1" onclick="editIrregularExpense(@expense.Id)">Edit</button>
                                        <button type="button" class="btn btn-sm btn-danger" onclick="deleteIrregularExpense(@expense.Id)">Delete</button>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="5" class="text-center text-muted">No irregular expenses found. <a href="#" data-bs-toggle="modal" data-bs-target="#addIrregularExpenseModal">Add your first expense</a></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Add Regular Expense Modal -->
<div class="modal fade" id="addRegularExpenseModal" tabindex="-1" aria-labelledby="addRegularExpenseModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addRegularExpenseModalLabel">Add Regular Expense</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post" asp-page-handler="AddRegularExpense">
                    <div class="mb-3">
                        <label for="regularExpenseName" class="form-label">Name</label>
                        <input type="text" id="regularExpenseName" name="name" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="regularExpenseAmount" class="form-label">Amount</label>
                        <input type="number" id="regularExpenseAmount" name="amount" step="0.01" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="regularExpenseCategory" class="form-label">Category</label>
                        <select id="regularExpenseCategory" name="categoryId" class="form-control" required>
                            <option value="">Select Category</option>
                            @foreach (var category in await Model.GetExpenseCategoriesAsync())
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="regularExpenseCurrency" class="form-label">Currency</label>
                        <select id="regularExpenseCurrency" name="currency" class="form-control" required>
                            <option value="CZK" selected>CZK</option>
                            <option value="EUR">EUR</option>
                            <option value="USD">USD</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="regularExpenseFrequency" class="form-label">Frequency</label>
                        <select id="regularExpenseFrequency" name="frequency" class="form-control" required>
                            <option value="Monthly">Monthly</option>
                            <option value="Quarterly">Quarterly</option>
                            <option value="SemiAnnually">Semi-Annually</option>
                            <option value="Annually">Annually</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="regularExpenseStartDate" class="form-label">Start Date</label>
                        <input type="date" id="regularExpenseStartDate" name="startDate" class="form-control" required />
                    </div>
                    <button type="submit" class="btn btn-primary">Add Expense</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Add Irregular Expense Modal -->
<div class="modal fade" id="addIrregularExpenseModal" tabindex="-1" aria-labelledby="addIrregularExpenseModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addIrregularExpenseModalLabel">Quick Add Irregular Expense</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post" asp-page-handler="AddIrregularExpense">
                    <div class="mb-3">
                        <label for="irregularExpenseName" class="form-label">Name</label>
                        <input type="text" id="irregularExpenseName" name="name" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="irregularExpenseAmount" class="form-label">Amount</label>
                        <input type="number" id="irregularExpenseAmount" name="amount" step="0.01" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="irregularExpenseCategory" class="form-label">Category</label>
                        <select id="irregularExpenseCategory" name="categoryId" class="form-control" required>
                            <option value="">Select Category</option>
                            @foreach (var category in await Model.GetExpenseCategoriesAsync())
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="irregularExpenseCurrency" class="form-label">Currency</label>
                        <select id="irregularExpenseCurrency" name="currency" class="form-control" required>
                            <option value="CZK" selected>CZK</option>
                            <option value="EUR">EUR</option>
                            <option value="USD">USD</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="irregularExpenseDate" class="form-label">Date</label>
                        <input type="date" id="irregularExpenseDate" name="date" class="form-control" required value="@DateTime.Today.ToString("yyyy-MM-dd")" />
                    </div>
                    <button type="submit" class="btn btn-primary">Add Expense</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Edit Regular Expense Modal -->
<div class="modal fade" id="editRegularExpenseModal" tabindex="-1" aria-labelledby="editRegularExpenseModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editRegularExpenseModalLabel">Edit Regular Expense</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post" asp-page-handler="UpdateRegularExpense">
                    <input type="hidden" id="editExpenseId" name="id" />
                    <div class="mb-3">
                        <label for="editRegularExpenseName" class="form-label">Name</label>
                        <input type="text" id="editRegularExpenseName" name="name" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="editRegularExpenseAmount" class="form-label">Amount</label>
                        <input type="number" id="editRegularExpenseAmount" name="amount" step="0.01" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="editRegularExpenseCategory" class="form-label">Category</label>
                        <select id="editRegularExpenseCategory" name="categoryId" class="form-control" required>
                            <option value="">Select Category</option>
                            @foreach (var category in await Model.GetExpenseCategoriesAsync())
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="editRegularExpenseCurrency" class="form-label">Currency</label>
                        <select id="editRegularExpenseCurrency" name="currency" class="form-control" required>
                            <option value="CZK">CZK</option>
                            <option value="EUR">EUR</option>
                            <option value="USD">USD</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="editRegularExpenseFrequency" class="form-label">Frequency</label>
                        <select id="editRegularExpenseFrequency" name="frequency" class="form-control" required>
                            <option value="Monthly">Monthly</option>
                            <option value="Quarterly">Quarterly</option>
                            <option value="SemiAnnually">Semi-Annually</option>
                            <option value="Annually">Annually</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="editRegularExpenseStartDate" class="form-label">Start Date</label>
                        <input type="date" id="editRegularExpenseStartDate" name="startDate" class="form-control" required />
                    </div>

                    <!-- Schedule History Section -->
                    <div class="mb-3">
                        <label class="form-label">Schedule History</label>
                        <div class="table-responsive">
                            <table class="table table-sm table-bordered" id="editExpenseSchedulesTable">
                                <thead class="table-light">
                                    <tr>
                                        <th>Start Date</th>
                                        <th>End Date</th>
                                        <th>Amount</th>
                                        <th>Status</th>
                                    </tr>
                                </thead>
                                <tbody id="editExpenseSchedulesBody">
                                    <!-- Schedule rows will be populated by JavaScript -->
                                </tbody>
                            </table>
                        </div>
                        <div class="form-text">
                            <small class="text-muted">This table shows all historical and future schedules for this expense.</small>
                        </div>
                    </div>

                    <div class="alert alert-info">
                        <small><strong>Note:</strong> Changes will only apply from the selected month forward. Historical data will remain unchanged.</small>
                    </div>
                    <button type="submit" class="btn btn-primary">Update Expense</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Edit Irregular Expense Modal -->
<div class="modal fade" id="editIrregularExpenseModal" tabindex="-1" aria-labelledby="editIrregularExpenseModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editIrregularExpenseModalLabel">Edit Irregular Expense</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form method="post" asp-page-handler="UpdateIrregularExpense">
                    <input type="hidden" id="editIrregularExpenseId" name="id" />
                    <div class="mb-3">
                        <label for="editIrregularExpenseName" class="form-label">Name</label>
                        <input type="text" id="editIrregularExpenseName" name="name" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="editIrregularExpenseAmount" class="form-label">Amount</label>
                        <input type="number" id="editIrregularExpenseAmount" name="amount" step="0.01" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="editIrregularExpenseCategory" class="form-label">Category</label>
                        <select id="editIrregularExpenseCategory" name="categoryId" class="form-control" required>
                            <option value="">Select Category</option>
                            @foreach (var category in await Model.GetExpenseCategoriesAsync())
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="editIrregularExpenseCurrency" class="form-label">Currency</label>
                        <select id="editIrregularExpenseCurrency" name="currency" class="form-control" required>
                            <option value="CZK">CZK</option>
                            <option value="EUR">EUR</option>
                            <option value="USD">USD</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="editIrregularExpenseDate" class="form-label">Date</label>
                        <input type="date" id="editIrregularExpenseDate" name="date" class="form-control" required />
                    </div>
                    <button type="submit" class="btn btn-primary">Update Expense</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Hidden form for delete operations -->
<form id="deleteIrregularExpenseForm" method="post" asp-page-handler="DeleteIrregularExpense" style="display: none;">
    <input type="hidden" name="expenseId" id="deleteExpenseId" />
</form>

@section Scripts {
    <script>
        // Create expense data objects
        const regularExpensesData = [
            @foreach (var expense in Model.ViewModel.RegularExpenses)
            {
                <text>
            {
                id: @expense.Id,
                name: '@Html.Raw(expense.Name.Replace("'", "\\'"))',
                amount: @expense.Amount,
                categoryId: @(expense.Category != null ? expense.Category.Id.ToString() : "null"),
                currency: '@expense.Currency',
                recurrence: '@expense.Recurrence',
                startDate: '@expense.StartDate.ToString("yyyy-MM-dd")',
                schedules: [
                    @foreach (var schedule in expense.Schedules.OrderBy(s => s.StartDate))
                    {
                        <text>
                    {
                        startDate: '@schedule.StartDate.ToString("yyyy-MM-dd")',
                        endDate: '@(schedule.EndDate?.ToString("yyyy-MM-dd") ?? "")',
                        amount: @schedule.Amount,
                        frequency: '@schedule.Frequency'
                    },
                        </text>
                    }
                ]
            },
                </text>
            }
        ];

        // Store full expense data for editing (including all schedules)
        const fullRegularExpensesData = [
            @foreach (var expense in await Model.GetAllRegularExpensesAsync())
            {
                <text>
            {
                id: @expense.Id,
                name: '@Html.Raw(expense.Name.Replace("'", "\\'"))',
                amount: @expense.Amount,
                categoryId: @(expense.Category != null ? expense.Category.Id.ToString() : "null"),
                currency: '@expense.Currency',
                recurrence: '@expense.Recurrence',
                startDate: '@expense.StartDate.ToString("yyyy-MM-dd")',
                schedules: [
                    @foreach (var schedule in expense.Schedules.OrderBy(s => s.StartDate))
                    {
                        <text>
                    {
                        startDate: '@schedule.StartDate.ToString("yyyy-MM-dd")',
                        endDate: '@(schedule.EndDate?.ToString("yyyy-MM-dd") ?? "")',
                        amount: @schedule.Amount,
                        frequency: '@schedule.Frequency'
                    },
                        </text>
                    }
                ]
            },
                </text>
            }
        ];

        // Define functions globally
        window.editRegularExpense = function(expenseId) {
            console.log('editRegularExpense called with ID:', expenseId);

            // Find the expense data (use full data for complete schedule information)
            const expense = fullRegularExpensesData.find(e => e.id == expenseId);
            if (expense) {
                console.log('Found expense:', expense.name);
                document.getElementById('editExpenseId').value = expense.id;
                document.getElementById('editRegularExpenseName').value = expense.name;
                document.getElementById('editRegularExpenseAmount').value = expense.amount;
                document.getElementById('editRegularExpenseCategory').value = expense.categoryId || '';
                document.getElementById('editRegularExpenseCurrency').value = expense.currency;
                document.getElementById('editRegularExpenseFrequency').value = expense.recurrence;
                document.getElementById('editRegularExpenseStartDate').value = expense.startDate;

                // Populate schedule history table
                const schedulesBody = document.getElementById('editExpenseSchedulesBody');
                schedulesBody.innerHTML = '';

                const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD format

                expense.schedules.forEach(schedule => {
                    const row = document.createElement('tr');

                    // Start Date
                    const startCell = document.createElement('td');
                    startCell.textContent = schedule.startDate;
                    row.appendChild(startCell);

                    // End Date
                    const endCell = document.createElement('td');
                    endCell.textContent = schedule.endDate || 'Ongoing';
                    row.appendChild(endCell);

                    // Amount
                    const amountCell = document.createElement('td');
                    amountCell.textContent = schedule.amount.toLocaleString('cs-CZ', { style: 'currency', currency: expense.currency });
                    row.appendChild(amountCell);

                    // Status
                    const statusCell = document.createElement('td');
                    const isCurrent = schedule.startDate <= today && (schedule.endDate === '' || schedule.endDate >= today);
                    const isFuture = schedule.startDate > today;
                    const isPast = schedule.endDate !== '' && schedule.endDate < today;

                    let statusBadge = '';
                    if (isCurrent) {
                        statusBadge = '<span class="badge bg-success">Current</span>';
                    } else if (isFuture) {
                        statusBadge = '<span class="badge bg-primary">Future</span>';
                    } else if (isPast) {
                        statusBadge = '<span class="badge bg-secondary">Past</span>';
                    }

                    statusCell.innerHTML = statusBadge;
                    row.appendChild(statusCell);

                    schedulesBody.appendChild(row);
                });
            }

            // Show the modal
            const modalElement = document.getElementById('editRegularExpenseModal');
            console.log('Modal element:', modalElement);
            if (modalElement) {
                const modal = new bootstrap.Modal(modalElement);
                modal.show();
                console.log('Modal shown successfully');
            } else {
                console.error('Modal element not found!');
            }
        };

        window.deleteIrregularExpense = function(expenseId) {
            if (confirm('Are you sure you want to delete this irregular expense? This action cannot be undone.')) {
                // Use the hidden form
                const form = document.getElementById('deleteIrregularExpenseForm');
                const expenseIdInput = document.getElementById('deleteExpenseId');
                expenseIdInput.value = expenseId;
                form.submit();
            }
        };

        window.editIrregularExpense = function(expenseId) {
            console.log('editIrregularExpense called with ID:', expenseId);

            // Find the expense data
            const expense = irregularExpensesData.find(e => e.id == expenseId);
            if (expense) {
                console.log('Found expense:', expense.name);
                document.getElementById('editIrregularExpenseId').value = expense.id;
                document.getElementById('editIrregularExpenseName').value = expense.name;
                document.getElementById('editIrregularExpenseAmount').value = expense.amount;
                document.getElementById('editIrregularExpenseCategory').value = expense.categoryId || '';
                document.getElementById('editIrregularExpenseCurrency').value = expense.currency;
                document.getElementById('editIrregularExpenseDate').value = expense.date;
            }

            // Show the modal
            const modalElement = document.getElementById('editIrregularExpenseModal');
            console.log('Modal element:', modalElement);
            if (modalElement) {
                const modal = new bootstrap.Modal(modalElement);
                modal.show();
                console.log('Modal shown successfully');
            } else {
                console.error('Modal element not found!');
            }
        };
    </script>
}
