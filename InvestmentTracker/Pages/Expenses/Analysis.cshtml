@page
@model InvestmentTracker.Pages.Expenses.AnalysisModel
@{
    // Load financial schedule config for display
    var scheduleConfig = Model.ScheduleConfig;
    string activeScheduleType = scheduleConfig?.ScheduleType ?? "Calendar";
    int activeStartDay = scheduleConfig?.StartDay ?? 1;
    string headingText;
    if (activeScheduleType == "Custom")
    {
        headingText = $"Expense Analysis: {Model.FinancialMonthStartDate:dd MMM yyyy} â€“ {Model.FinancialMonthEndDate:dd MMM yyyy}";
        ViewData["Title"] = headingText;
    }
    else
    {
        var currentDate = new DateTime(Model.FinancialMonthStartDate.Year, Model.FinancialMonthStartDate.Month, 1);
        headingText = $"Expense Analysis - {currentDate:MMMM yyyy}";
        ViewData["Title"] = headingText;
    }
}

<div class="alert alert-info d-flex align-items-center mb-3" role="alert">
    <i class="bi bi-calendar me-2"></i>
    <div>
        <strong>Active Schedule:</strong> @activeScheduleType
        @if (activeScheduleType == "Custom")
        {
            <span>(Start day: @activeStartDay)</span>
        }
        <a href="/expenses/financialscheduleconfig" class="btn btn-sm btn-outline-primary ms-3">Change</a>
    </div>
</div>

<div class="d-flex align-items-center justify-content-between mb-3">
    <div class="d-flex align-items-center">
        <h2 class="mb-0 me-3">@headingText</h2>
    </div>
    <form method="get" class="d-flex align-items-end gap-2 mb-0">
        <div>
            <label for="monthPicker" class="form-label mb-0">Month</label>
            <input type="date" id="monthPicker" name="selectedDate" class="form-control" value="@Model.SelectedDate?.ToString("yyyy-MM-dd")" />
        </div>
        <button type="submit" class="btn btn-primary">View</button>
        <div class="btn-group ms-2" role="group">
            <button type="button" class="btn btn-secondary" onclick="navigateMonth(-1)" title="Previous Month">
                <i class="bi bi-chevron-left"></i> Previous
            </button>
            <button type="button" class="btn btn-primary" onclick="navigateToCurrentMonth()" title="Current Month">
                <i class="bi bi-calendar-event"></i>
                <span class="d-none d-sm-inline ms-1">Current</span>
            </button>
            <button type="button" class="btn btn-secondary" onclick="navigateMonth(1)" title="Next Month">
                Next <i class="bi bi-chevron-right"></i>
            </button>
        </div>
    </form>
</div>

<div class="card bg-dark-2 border-secondary">
    <div class="card-header">
        <h5>Irregular Expenses by Category</h5>
    </div>
    <div class="card-body">
        <canvas id="expenseChart"></canvas>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const ctx = document.getElementById('expenseChart').getContext('2d');
            const chartData = JSON.parse('@Html.Raw(Model.ChartDataJson)');

            if (chartData.labels && chartData.labels.length > 0) {
                new Chart(ctx, {
                    type: 'doughnut',
                    data: chartData,
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                position: 'top',
                            },
                            title: {
                                display: true,
                                text: 'Irregular Expenses by Category'
                            }
                        }
                    }
                });
            } else {
                const canvas = document.getElementById('expenseChart');
                const p = document.createElement('p');
                p.textContent = 'No irregular expense data available for the selected period.';
                p.classList.add('text-center', 'text-muted');
                canvas.parentElement.replaceChild(p, canvas);
            }
        });

        // Month navigation function
        window.navigateMonth = function(direction) {
            const dateInput = document.getElementById('monthPicker');
            const currentDate = new Date(dateInput.value);

            // Add/subtract months
            currentDate.setMonth(currentDate.getMonth() + direction);

            // Format as YYYY-MM-DD
            const newDateStr = currentDate.toISOString().split('T')[0];

            // Update the input value
            dateInput.value = newDateStr;

            // Submit the form to navigate
            const form = dateInput.closest('form');
            form.submit();
        };

        window.navigateToCurrentMonth = function() {
            const dateInput = document.getElementById('monthPicker');
            const currentDate = new Date();

            // Get schedule configuration from server-rendered values
            const scheduleType = '@(Model.ScheduleConfig?.ScheduleType ?? "Calendar")';
            const startDay = parseInt('@(Model.ScheduleConfig?.StartDay ?? 1)');

            let targetDate;

            if (scheduleType === 'Custom') {
                // For custom schedules, find the start date of the period containing current date
                const currentYear = currentDate.getFullYear();
                const currentMonth = currentDate.getMonth(); // 0-based
                const currentDay = currentDate.getDate();

                if (currentDay >= startDay) {
                    // Current date is in the period starting this month
                    targetDate = new Date(currentYear, currentMonth, startDay);
                } else {
                    // Current date is in the period starting last month
                    if (currentMonth === 0) {
                        // January, so go to December of previous year
                        targetDate = new Date(currentYear - 1, 11, startDay);
                    } else {
                        targetDate = new Date(currentYear, currentMonth - 1, startDay);
                    }
                }
            } else {
                // For calendar months, use the first day of current month
                targetDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
            }

            // Format as YYYY-MM-DD for the date input
            const targetDateStr = targetDate.toISOString().split('T')[0];

            // Update the input value
            dateInput.value = targetDateStr;

            // Submit the form to navigate
            const form = dateInput.closest('form');
            form.submit();
        };

        // Keyboard shortcuts for month navigation
        document.addEventListener('DOMContentLoaded', function() {
            document.addEventListener('keydown', function(event) {
                // Don't trigger shortcuts when user is typing in input fields
                if (event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA' || event.target.tagName === 'SELECT') {
                    return;
                }

                // Don't trigger shortcuts when modal is open
                if (document.querySelector('.modal.show')) {
                    return;
                }

                // Don't trigger shortcuts when modifier keys are pressed (Cmd, Ctrl, Alt, Shift)
                if (event.metaKey || event.ctrlKey || event.altKey || event.shiftKey) {
                    return;
                }

                switch(event.key) {
                    case 'ArrowLeft':
                    case 'p':
                    case 'P':
                        event.preventDefault();
                        navigateMonth(-1);
                        break;
                    case 'ArrowRight':
                    case 'n':
                    case 'N':
                        event.preventDefault();
                        navigateMonth(1);
                        break;
                    case 'c':
                    case 'C':
                    case 't':
                    case 'T':
                    case 'Home':
                        event.preventDefault();
                        navigateToCurrentMonth();
                        break;
                    case 'h':
                    case 'H':
                        event.preventDefault();
                        navigateToCurrentMonth();
                        break;
                }
            });
        });
    </script>
}