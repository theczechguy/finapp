@page
@model InvestmentTracker.Pages.Expenses.AnalysisModel
@{
    // Load financial schedule config for display
    var scheduleConfig = Model.ScheduleConfig;
    string activeScheduleType = scheduleConfig?.ScheduleType ?? "Calendar";
    int activeStartDay = scheduleConfig?.StartDay ?? 1;
    string headingText;
    if (activeScheduleType == "Custom")
    {
        headingText = $"Expense Analysis: {Model.FinancialMonthStartDate:dd MMM yyyy} â€“ {Model.FinancialMonthEndDate:dd MMM yyyy}";
        ViewData["Title"] = headingText;
    }
    else
    {
        var currentDate = new DateTime(Model.FinancialMonthStartDate.Year, Model.FinancialMonthStartDate.Month, 1);
        headingText = $"Expense Analysis - {currentDate:MMMM yyyy}";
        ViewData["Title"] = headingText;
    }
}

<div class="d-flex align-items-center justify-content-between mb-3">
    <div class="d-flex align-items-center">
        <h2 class="mb-0 me-3">@headingText</h2>
    </div>
    <form method="get" class="d-flex align-items-end gap-2 mb-0">
        <div>
            <label for="monthPicker" class="form-label mb-0">Month</label>
            <input type="date" id="monthPicker" name="selectedDate" class="form-control" value="@Model.SelectedDate?.ToString("yyyy-MM-dd")" />
        </div>
        <button type="submit" class="btn btn-primary">Update View</button>
        <div class="btn-group ms-2" role="group">
            <button type="button" class="btn btn-secondary" onclick="navigateMonth(-1)" title="Previous Month">
                <i class="bi bi-chevron-left"></i> Previous
            </button>
            <button type="button" class="btn btn-primary" onclick="navigateToCurrentMonth()" title="Current Month">
                <i class="bi bi-calendar-event"></i>
                <span class="d-none d-sm-inline ms-1">Current</span>
            </button>
            <button type="button" class="btn btn-secondary" onclick="navigateMonth(1)" title="Next Month">
                Next <i class="bi bi-chevron-right"></i>
            </button>
        </div>
    </form>
</div>

<div class="row">
    <div class="col-md-6">
        <div class="card bg-dark-2 border-secondary">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5>One-Time Expenses by Category</h5>
                <div class="d-flex gap-2">
                    <select class="form-select form-select-sm" id="irregularChartType" style="width: auto;">
                        <option value="pie">Pie Chart</option>
                        <option value="doughnut">Donut Chart</option>
                        <option value="bar">Bar Chart</option>
                    </select>
                </div>
            </div>
            <div class="card-body">
                <canvas id="expenseChart"></canvas>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card bg-dark-2 border-secondary">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5>Regular Expenses by Category</h5>
                <div class="d-flex gap-2">
                    <select class="form-select form-select-sm" id="regularChartType" style="width: auto;">
                        <option value="pie">Pie Chart</option>
                        <option value="doughnut">Donut Chart</option>
                        <option value="bar">Bar Chart</option>
                    </select>
                </div>
            </div>
            <div class="card-body">
                <canvas id="regularExpenseChart"></canvas>
            </div>
        </div>
    </div>
</div>

<div class="card bg-dark-2 border-secondary mt-4">
    <div class="card-header">
        <h5>Expense Trends (Last 12 Months)</h5>
        <small class="text-muted">Regular vs One-Time Expenses Over Time</small>
    </div>
    <div class="card-body">
        <canvas id="trendsChart" width="800" height="600" style="max-width: 100%; height: auto;"></canvas>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        let irregularChart = null;
        let regularChart = null;

        document.addEventListener('DOMContentLoaded', function () {
            // Initial render
            renderIrregularChart();
            renderRegularChart();
            renderTrendsChart();
            
            // Chart type change listeners
            const irregularChartType = document.getElementById('irregularChartType');
            const regularChartType = document.getElementById('regularChartType');
            
            if (irregularChartType) irregularChartType.addEventListener('change', renderIrregularChart);
            if (regularChartType) regularChartType.addEventListener('change', renderRegularChart);
        });

        function renderIrregularChart() {
            const ctx = document.getElementById('expenseChart');
            if (!ctx) return;
            
            const chartData = JSON.parse('@Html.Raw(Model.ChartDataJson)');
            const chartType = document.getElementById('irregularChartType').value;
            
            // Destroy existing chart
            if (irregularChart) {
                irregularChart.destroy();
            }

            if (chartData.labels && chartData.labels.length > 0) {
                const config = getChartConfig(chartType, chartData, 'One-Time Expenses by Category');
                irregularChart = new Chart(ctx, config);
            } else {
                showNoDataMessage(ctx, 'No one-time expense data available for the selected period.');
            }
        }

        function renderRegularChart() {
            const ctx = document.getElementById('regularExpenseChart');
            if (!ctx) return;
            
            const chartData = JSON.parse('@Html.Raw(Model.RegularChartDataJson)');
            const chartType = document.getElementById('regularChartType').value;
            
            // Destroy existing chart
            if (regularChart) {
                regularChart.destroy();
            }

            if (chartData.labels && chartData.labels.length > 0) {
                const config = getChartConfig(chartType, chartData, 'Regular Expenses by Category');
                regularChart = new Chart(ctx, config);
            } else {
                showNoDataMessage(ctx, 'No regular expense data available for the selected period.');
            }
        }

        function getChartConfig(chartType, chartData, title) {
            const baseConfig = {
                data: chartData,
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: chartType === 'bar' ? 'top' : 'right',
                            labels: {
                                boxWidth: 12,
                                padding: 8
                            }
                        },
                        title: {
                            display: true,
                            text: title
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    let label = context.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    label += new Intl.NumberFormat('cs-CZ', {
                                        style: 'currency',
                                        currency: 'CZK'
                                    }).format(context.parsed.y || context.parsed);
                                    return label;
                                }
                            }
                        }
                    }
                }
            };

            switch (chartType) {
                case 'pie':
                    return {
                        type: 'pie',
                        ...baseConfig,
                        options: {
                            ...baseConfig.options,
                            plugins: {
                                ...baseConfig.options.plugins,
                                legend: {
                                    ...baseConfig.options.plugins.legend,
                                    position: 'right'
                                }
                            }
                        }
                    };
                
                case 'doughnut':
                    return {
                        type: 'doughnut',
                        ...baseConfig,
                        options: {
                            ...baseConfig.options,
                            cutout: '50%',
                            plugins: {
                                ...baseConfig.options.plugins,
                                legend: {
                                    ...baseConfig.options.plugins.legend,
                                    position: 'right'
                                }
                            }
                        }
                    };
                
                case 'bar':
                    return {
                        type: 'bar',
                        ...baseConfig,
                        options: {
                            ...baseConfig.options,
                            indexAxis: 'y', // Horizontal bar chart
                            plugins: {
                                ...baseConfig.options.plugins,
                                legend: {
                                    display: false // Hide legend for bar chart
                                }
                            },
                            scales: {
                                x: {
                                    beginAtZero: true,
                                    ticks: {
                                        callback: function(value) {
                                            return new Intl.NumberFormat('cs-CZ', {
                                                style: 'currency',
                                                currency: 'CZK',
                                                notation: 'compact'
                                            }).format(value);
                                        }
                                    }
                                },
                                y: {
                                    ticks: {
                                        // Truncate long labels
                                        callback: function(value, index) {
                                            const label = this.getLabelForValue(index);
                                            return label.length > 20 ? label.substring(0, 17) + '...' : label;
                                        }
                                    }
                                }
                            }
                        }
                    };
                
                default:
                    return {
                        type: 'pie',
                        ...baseConfig
                    };
            }
        }

        function showNoDataMessage(canvas, message) {
            const container = canvas.parentElement;
            const p = document.createElement('p');
            p.textContent = message;
            p.classList.add('text-center', 'text-muted', 'mt-4');
            container.replaceChild(p, canvas);
        }

        // Render trends chart
        function renderTrendsChart() {
            const trendsCtx = document.getElementById('trendsChart');
            if (!trendsCtx) return;
            
            const trendsData = JSON.parse('@Html.Raw(Model.TrendsChartDataJson)');

            if (trendsData.labels && trendsData.labels.length > 0) {
                new Chart(trendsCtx, {
                    type: 'line',
                    data: trendsData,
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'top',
                            },
                            title: {
                                display: true,
                                text: 'Expense Trends Over Time'
                            },
                            tooltip: {
                                mode: 'index',
                                intersect: false,
                                callbacks: {
                                    label: function(context) {
                                        let label = context.dataset.label || '';
                                        if (label) {
                                            label += ': ';
                                        }
                                        label += new Intl.NumberFormat('cs-CZ', {
                                            style: 'currency',
                                            currency: 'CZK'
                                        }).format(context.parsed.y);
                                        return label;
                                    }
                                }
                            }
                        },
                        scales: {
                            x: {
                                display: true,
                                title: {
                                    display: true,
                                    text: 'Month'
                                }
                            },
                            y: {
                                display: true,
                                title: {
                                    display: true,
                                    text: 'Amount (CZK)'
                                },
                                ticks: {
                                    callback: function(value) {
                                        return new Intl.NumberFormat('cs-CZ', {
                                            style: 'currency',
                                            currency: 'CZK',
                                            notation: 'compact'
                                        }).format(value);
                                    }
                                }
                            }
                        },
                        interaction: {
                            mode: 'nearest',
                            axis: 'x',
                            intersect: false
                        }
                    }
                });
            } else {
                const trendsCanvas = document.getElementById('trendsChart');
                const p = document.createElement('p');
                p.textContent = 'No trend data available.';
                p.classList.add('text-center', 'text-muted');
                trendsCanvas.parentElement.replaceChild(p, trendsCanvas);
            }
        }
        window.navigateMonth = function(direction) {
            const dateInput = document.getElementById('monthPicker');
            const currentDate = new Date(dateInput.value);

            // Add/subtract months
            currentDate.setMonth(currentDate.getMonth() + direction);

            // Format as YYYY-MM-DD
            const newDateStr = currentDate.toISOString().split('T')[0];

            // Update the input value
            dateInput.value = newDateStr;

            // Submit the form to navigate
            const form = dateInput.closest('form');
            form.submit();
        };

        window.navigateToCurrentMonth = function() {
            const dateInput = document.getElementById('monthPicker');
            const currentDate = new Date();

            // Get schedule configuration from server-rendered values
            const scheduleType = '@(Model.ScheduleConfig?.ScheduleType ?? "Calendar")';
            const startDay = parseInt('@(Model.ScheduleConfig?.StartDay ?? 1)');

            let targetDate;

            if (scheduleType === 'Custom') {
                // For custom schedules, find the start date of the period containing current date
                const currentYear = currentDate.getFullYear();
                const currentMonth = currentDate.getMonth(); // 0-based
                const currentDay = currentDate.getDate();

                if (currentDay >= startDay) {
                    // Current date is in the period starting this month
                    targetDate = new Date(currentYear, currentMonth, startDay);
                } else {
                    // Current date is in the period starting last month
                    if (currentMonth === 0) {
                        // January, so go to December of previous year
                        targetDate = new Date(currentYear - 1, 11, startDay);
                    } else {
                        targetDate = new Date(currentYear, currentMonth - 1, startDay);
                    }
                }
            } else {
                // For calendar months, use the first day of current month
                targetDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
            }

            // Format as YYYY-MM-DD for the date input
            const targetDateStr = targetDate.toISOString().split('T')[0];

            // Update the input value
            dateInput.value = targetDateStr;

            // Submit the form to navigate
            const form = dateInput.closest('form');
            form.submit();
        };

        // Keyboard shortcuts for month navigation
        document.addEventListener('DOMContentLoaded', function() {
            document.addEventListener('keydown', function(event) {
                // Don't trigger shortcuts when user is typing in input fields
                if (event.target.tagName === 'INPUT' || event.target.tagName === 'TEXTAREA' || event.target.tagName === 'SELECT') {
                    return;
                }

                // Don't trigger shortcuts when modal is open
                if (document.querySelector('.modal.show')) {
                    return;
                }

                // Don't trigger shortcuts when modifier keys are pressed (Cmd, Ctrl, Alt, Shift)
                if (event.metaKey || event.ctrlKey || event.altKey || event.shiftKey) {
                    return;
                }

                switch(event.key) {
                    case 'ArrowLeft':
                    case 'p':
                    case 'P':
                        event.preventDefault();
                        navigateMonth(-1);
                        break;
                    case 'ArrowRight':
                    case 'n':
                    case 'N':
                        event.preventDefault();
                        navigateMonth(1);
                        break;
                    case 'c':
                    case 'C':
                    case 't':
                    case 'T':
                    case 'Home':
                        event.preventDefault();
                        navigateToCurrentMonth();
                        break;
                    case 'h':
                    case 'H':
                        event.preventDefault();
                        navigateToCurrentMonth();
                        break;
                }
            });
        });
    </script>
}