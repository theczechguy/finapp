@page "{id:int}"
@using System.Globalization
@using InvestmentTracker.Models
@model InvestmentTracker.Pages.Investments.ValuesModel

<h2>Values - @Model.Investment?.Name</h2>
<p>
    <a class="btn btn-secondary" asp-page="List">Back</a>
</p>

@if (Model.Investment is not null)
{
    var culture = CultureInfo.CreateSpecificCulture(Model.Investment.Currency.ToCultureCode());
    <div class="card mb-3">
        <div class="card-body">
            <h5 class="card-title">Contribution Schedules</h5>
            <div class="mb-2 text-muted">One-time charge: @(Model.Investment.ChargeAmount == 0 ? "-" : Model.Investment.ChargeAmount.ToString("C", culture))</div>
            @if (Model.Investment.Schedules?.Any() == true)
            {
                <ul class="mb-2">
                @foreach (var s in Model.Investment.Schedules.OrderBy(s=>s.StartDate))
                {
                    <li>
                        <strong>@s.Amount.ToString("C", culture)</strong> on day @(s.DayOfMonth?.ToString() ?? s.StartDate.Day.ToString()) from @s.StartDate.ToShortDateString() to @(s.EndDate?.ToShortDateString() ?? "open")
                    </li>
                }
                </ul>
            }
            else
            {
                <p class="text-muted mb-2">No schedules.</p>
            }
            <a class="btn btn-sm btn-primary" asp-page="Edit" asp-route-id="@Model.Investment.Id" title="Edit Schedules" aria-label="Edit Schedules">
                <i class="bi bi-pencil"></i>
            </a>
        </div>
    </div>

    <h5>Add Value</h5>
    <form method="post" asp-page-handler="AddValue" asp-route-id="@Model.Investment.Id" class="row g-3" data-loading="Adding value...">
        <div class="col-12 col-md-auto">
            <input type="hidden" asp-for="NewValue.InvestmentId" />
            <label asp-for="NewValue.AsOf" class="form-label"></label>
            <input asp-for="NewValue.AsOf" class="form-control" type="date" />
            <span asp-validation-for="NewValue.AsOf" class="text-danger"></span>
        </div>
        <div class="col-12 col-md-auto">
            <label asp-for="NewValue.Value" class="form-label"></label>
            @if (ViewData.ModelState.IsValid)
            {
                <input asp-for="NewValue.Value" type="text" inputmode="decimal" class="form-control" value="" placeholder="0.00" autocomplete="off" />
            }
            else
            {
                <input asp-for="NewValue.Value" type="text" inputmode="decimal" class="form-control" placeholder="0.00" autocomplete="off" />
            }
            <span asp-validation-for="NewValue.Value" class="text-danger"></span>
        </div>
        <div class="col-12 col-md-auto">
            <label asp-for="NewValue.ChangeType" class="form-label">Type</label>
            <select asp-for="NewValue.ChangeType" class="form-control" id="change-type-select">
                <option value="@ValueChangeType.MarketValue">Market Value</option>
                <option value="@ValueChangeType.Buy">Buy</option>
                <option value="@ValueChangeType.Interest">Interest</option>
                <option value="@ValueChangeType.Sell">Sell</option>
                <option value="@ValueChangeType.Other">Other</option>
            </select>
            <span asp-validation-for="NewValue.ChangeType" class="text-danger"></span>
        </div>
        <div class="col-12 col-md-auto align-self-end text-md-end mt-2 mt-md-0">
            <button type="submit" class="btn btn-primary w-100 d-md-inline-block" title="Add" aria-label="Add">
                <i class="bi bi-plus-lg"></i>
                <span class="d-none d-sm-inline ms-1">Add</span>
            </button>
        </div>
    </form>
    <div class="text-muted small mb-3">
        <i class="bi bi-keyboard me-1"></i>Tip: Press <kbd>A</kbd> to focus value form, <kbd>Enter</kbd> to add
    </div>
    <div class="alert alert-info small mb-3 d-none" id="interest-help">
        <strong>Interest â€” note:</strong> Enter only the interest amount; it will be added to the previous total.
    </div>

    <h5 class="mt-4">One-time Contributions</h5>
    <form method="post" asp-page-handler="AddContribution" asp-route-id="@Model.Investment.Id" class="row g-3" data-loading="Adding contribution...">
        <div class="col-12 col-md-auto">
            <label asp-for="NewContribution.Date" class="form-label">Date</label>
            <input asp-for="NewContribution.Date" type="date" class="form-control" />
            <span asp-validation-for="NewContribution.Date" class="text-danger"></span>
        </div>
        <div class="col-12 col-md-auto">
            <label asp-for="NewContribution.Amount" class="form-label">Amount</label>
            @if (ViewData.ModelState.IsValid)
            {
                <input asp-for="NewContribution.Amount" type="text" inputmode="decimal" class="form-control" value="" placeholder="0.00" autocomplete="off" />
            }
            else
            {
                <input asp-for="NewContribution.Amount" type="text" inputmode="decimal" class="form-control" placeholder="0.00" autocomplete="off" />
            }
            <span asp-validation-for="NewContribution.Amount" class="text-danger"></span>
        </div>
        <div class="col-12 col-md-auto align-self-end text-md-end mt-2 mt-md-0">
            <button type="submit" class="btn btn-primary w-100 d-md-inline-block" title="Add Contribution" aria-label="Add Contribution">
                <i class="bi bi-plus-lg"></i>
                <span class="d-none d-sm-inline ms-1">Add Contribution</span>
            </button>
        </div>
    </form>
    <div class="text-muted small mb-3">
        <i class="bi bi-keyboard me-1"></i>Tip: Press <kbd>B</kbd> to focus contribution form, <kbd>Enter</kbd> to add
    </div>

    @if (Model.Investment.OneTimeContributions?.Any() == true)
    {
        <div class="table-responsive">
        <table class="table table-striped table-sm mt-2">
            <thead><tr><th>Date</th><th>Amount</th><th></th></tr></thead>
            <tbody>
            @foreach (var c in Model.Investment.OneTimeContributions.OrderByDescending(c=>c.Date))
            {
                <tr>
                    <td>@c.Date.ToShortDateString()</td>
                    <td>@c.Amount.ToString("C", culture)</td>
                    <td>
                        <form method="post" asp-page-handler="DeleteContribution" asp-route-id="@Model.Investment.Id" asp-route-contributionId="@c.Id" data-confirm="Delete this one-time contribution?" data-loading="Deleting contribution...">
                            <button type="submit" class="btn btn-sm btn-danger" title="Delete" aria-label="Delete"><i class="bi bi-trash"></i></button>
                        </form>
                    </td>
                </tr>
            }
            </tbody>
        </table>
        </div>
    }

    <h5 class="mt-4">History</h5>
    
    @if (Model.Investment?.Values?.Any() == true)
    {
        var changeTypeSummary = Model.Investment.Values
            .GroupBy(v => v.ChangeType)
            .Select(g => new { Type = g.Key, Count = g.Count(), TotalValue = g.Sum(v => v.Value) })
            .OrderByDescending(x => x.Count)
            .ToList();
        
        <div class="mb-3">
            <small class="text-muted">Change Type Summary:</small>
            @foreach (var summary in changeTypeSummary)
            {
                <span class="badge me-2 
                    @(summary.Type == ValueChangeType.MarketValue ? "bg-secondary" : 
                      summary.Type == ValueChangeType.Buy ? "bg-success" : 
                      summary.Type == ValueChangeType.Interest ? "bg-success" : 
                      summary.Type == ValueChangeType.Sell ? "bg-danger" : "bg-warning")">
                    @summary.Type (@summary.Count)
                </span>
            }
        </div>
    }
    
    <div class="table-responsive">
    <table class="table table-striped table-sm">
        <thead>
            <tr>
                <th>Date</th>
                <th>Value</th>
                <th>Type</th>
                <th>Change</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
        @{
            // Prepare a list of values ordered newest-first and compute month-over-month percent changes
            var valuesList = Model.Investment?.Values?.OrderByDescending(v => v.AsOf).ToList() ?? new List<InvestmentValue>();
            var changeMap = new Dictionary<int, decimal?>();
            for (int i = 0; i < valuesList.Count; i++)
            {
                var current = valuesList[i];
                var older = (i + 1) < valuesList.Count ? valuesList[i + 1] : null; // the immediately previous (older) snapshot
                if (older is not null && older.Value != 0)
                {
                    changeMap[current.Id] = ((current.Value - older.Value) / older.Value) * 100;
                }
                else
                {
                    changeMap[current.Id] = null; // not applicable (no prior snapshot or division by zero)
                }
            }
        }
        @foreach (var v in valuesList)
        {
            decimal? changePercentNullable = changeMap.ContainsKey(v.Id) ? changeMap[v.Id] : null;
            var changeClass = changePercentNullable.HasValue
                ? (changePercentNullable.Value > 0 ? "text-success" : changePercentNullable.Value < 0 ? "text-danger" : "text-muted")
                : "text-muted";
            string? changeDisplay = changePercentNullable.HasValue
                ? changePercentNullable.Value.ToString("+#.##;-#.##;0") + "%"
                : null;
            <tr>
                <td>@v.AsOf.ToShortDateString()</td>
                <td>@v.Value.ToString("C", culture)</td>
                <td>
                    <span class="badge 
                        @(v.ChangeType == ValueChangeType.MarketValue ? "bg-secondary" : 
                          v.ChangeType == ValueChangeType.Buy ? "bg-success" : 
                          v.ChangeType == ValueChangeType.Interest ? "bg-success" : 
                          v.ChangeType == ValueChangeType.Sell ? "bg-danger" : "bg-warning")">
                        @v.ChangeType.ToString()
                    </span>
                </td>
                <td class="@changeClass">
                    @if (changePercentNullable.HasValue)
                    {
                        <small>@(changeDisplay)</small>
                    }
                    else
                    {
                        <small class="text-muted">-</small>
                    }
                </td>
                <td>
                    <form method="post" asp-page-handler="Delete" asp-route-id="@(Model.Investment?.Id ?? 0)" asp-route-valueId="@v.Id" data-confirm="Delete this value record?" data-loading="Deleting value...">
                        <button type="submit" class="btn btn-sm btn-danger" title="Delete" aria-label="Delete"><i class="bi bi-trash"></i></button>
                    </form>
                </td>
            </tr>
        }
        </tbody>
    </table>
    </div>
}

<div class="card mb-4">
        <div class="card-header">
            Value vs Invested
            <div class="float-end">
                <div class="btn-group btn-group-sm" role="group" aria-label="Time range selector">
                    <button type="button" data-range="3m" class="btn time-range-btn btn-secondary">3M</button>
                    <button type="button" data-range="6m" class="btn time-range-btn btn-secondary">6M</button>
                    <button type="button" data-range="12m" class="btn time-range-btn btn-primary">12M</button>
                    <button type="button" data-range="all" class="btn time-range-btn btn-secondary">All</button>
                </div>
            </div>
        </div>
        <div class="card-body">
            <canvas id="investment-series-chart" height="200"></canvas>
        </div>
    </div>

@section Scripts{
    <partial name="_ValidationScriptsPartial" />
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const select = document.getElementById('change-type-select');
            const helpText = document.getElementById('interest-help');
            if (!select || !helpText) return;

            function updateUi() {
                const isInterest = select.value === '@ValueChangeType.Interest';
                helpText.classList.toggle('d-none', !isInterest);
            }

            select.addEventListener('change', updateUi);
            // Also update on focus in case the user tabs into the control
            select.addEventListener('input', updateUi);
            // initial run
            updateUi();
        });

        (function() {
            const investmentId = '@Model.Investment?.Id';
            const earliestValueFromModel = '@(Model.Investment?.Values?.OrderBy(v => v.AsOf).FirstOrDefault()?.AsOf.ToString("yyyy-MM-dd") ?? "")';
            if (!investmentId) return;
            const canvas = document.getElementById('investment-series-chart');
            if (!canvas) return;
            const ctx = canvas.getContext('2d');

            function formatCurrency(val) {
                try { return val.toLocaleString(undefined, { style: 'currency', currency: '@Model.Investment?.Currency' }); } catch { return val.toFixed(2); }
            }

            let seriesChart = null;

            function fetchAndRender(fromDate, toDate) {
                let url = `/api/investments/${investmentId}/series`;
                const params = new URLSearchParams();
                if (fromDate) params.append('from', fromDate);
                if (toDate) params.append('to', toDate);
                if (Array.from(params).length > 0) url += `?${params.toString()}`;

                fetch(url)
                    .then(r => r.ok ? r.json() : Promise.reject('Failed'))
                    .then(data => {
                        const labels = data.map(d => d.asOf);
                        const values = data.map(d => d.value);
                        const invested = data.map(d => d.invested);

                        if (seriesChart) {
                            seriesChart.data.labels = labels;
                            seriesChart.data.datasets[0].data = invested;
                            seriesChart.data.datasets[1].data = values;
                            seriesChart.update();
                        } else {
                            seriesChart = new Chart(ctx, {
                                type: 'line',
                                data: {
                                    labels: labels,
                                    datasets: [
                                        { label: 'Invested', data: invested, borderColor: '#2ca02c', tension: 0.2, fill: false },
                                        { label: 'Value', data: values, borderColor: '#1f77b4', tension: 0.2, fill: true, backgroundColor: 'rgba(31,119,180,0.08)' }
                                    ]
                                },
                                options: {
                                    responsive: true,
                                    interaction: { mode: 'index', intersect: false },
                                    plugins: {
                                        tooltip: {
                                            callbacks: {
                                                label: function(context) {
                                                    const label = context.dataset.label || '';
                                                    const v = context.parsed.y;
                                                    return `${label}: ${formatCurrency(v)}`;
                                                }
                                            }
                                        }
                                    },
                                    scales: {
                                        y: { beginAtZero: false }
                                    }
                                }
                            });
                        }
                    })
                    .catch(() => { /* silent - chart stays empty */ });
            }

            function toISODate(d) { return d.toISOString().slice(0,10); }

            function computeFromDateForRange(range) {
                const today = new Date();
                if (range === '3m') { const d = new Date(today.getFullYear(), today.getMonth() - 2, 1); return toISODate(d); }
                if (range === '6m') { const d = new Date(today.getFullYear(), today.getMonth() - 5, 1); return toISODate(d); }
                if (range === '12m') { const d = new Date(today.getFullYear(), today.getMonth() - 11, 1); return toISODate(d); }
                if (range === 'all') { return earliestValueFromModel || ''; }
                return '';
            }

            // wire buttons
            document.querySelectorAll('.time-range-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const range = this.dataset.range;
                    document.querySelectorAll('.time-range-btn').forEach(b => b.classList.remove('btn-primary'));
                    document.querySelectorAll('.time-range-btn').forEach(b => b.classList.add('btn-secondary'));
                    this.classList.remove('btn-secondary');
                    this.classList.add('btn-primary');
                    const from = computeFromDateForRange(range);
                    const to = toISODate(new Date());
                    fetchAndRender(from, to);
                });
            });

            // initial load - default 12m
            const defaultBtn = document.querySelector('.time-range-btn[data-range="12m"]');
            if (defaultBtn) defaultBtn.click();
        })();
    </script>
}
